<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TS笔记</title>
      <link href="/11-ts-bi-ji.html"/>
      <url>/11-ts-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是TypeScript"><a href="#1-什么是TypeScript" class="headerlink" title="1. 什么是TypeScript"></a>1. 什么是TypeScript</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28ca61cc160c417c8497a00defdca5f0~tplv-k3u1fbpfcp-watermark.image" alt="TS与JS.png"></p><p><strong>TypeScript 是 JavaScript 的一个超集</strong>，主要提供了<strong>类型系统</strong>和<strong>对 ES6+ 的支持</strong>，它由 Microsoft 开发，代码<a href="https://github.com/Microsoft/TypeScript">开源于 GitHub (opens new window)</a>上</p><p>TypeScript 的特点：</p><ul><li><p><strong>可编译成纯净、简洁的js代码以运行在多个平台上</strong></p></li><li><p><strong>强大的静态类型和代码完成</strong></p></li><li><p><strong>提供js的ES6特性</strong></p></li></ul><h1 id="2-基本类型"><a href="#2-基本类型" class="headerlink" title="2.基本类型"></a>2.基本类型</h1><h2 id="类型特性"><a href="#类型特性" class="headerlink" title="类型特性"></a>类型特性</h2><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ul><li><p>通过<code>:</code>指定TS中变量（参数、形参）的类型；</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；</p><p>语法：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">,</span> 参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">:</span> 返回值类型<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种   <code>as</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li><li><p>第二种   <code>尖括号</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li></ul><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>如果你的变量的声明和赋值同时进行，可以省略掉类型声明，TS编译器会自动判断变量的类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 定义变量时赋值了, 推断为对应的类型 */</span><span class="token keyword">let</span> b9 <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">// number</span><span class="token comment" spellcheck="true">// b9 = 'abc' // error</span><span class="token comment" spellcheck="true">/* 定义变量时没有赋值, 推断为any类型（隐式推断，tsconfig中可关闭） */</span><span class="token keyword">let</span> b10  <span class="token comment" spellcheck="true">// any类型</span>b10 <span class="token operator">=</span> <span class="token number">123</span>b10 <span class="token operator">=</span> <span class="token string">'abc'</span></code></pre><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><blockquote><p>类似接口，但类型别名不能重复命名，接口可以</p></blockquote><pre class=" language-typescript"><code class="language-typescript">type MyType <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型（Union Types）表示取值可以为多种类型中的一种，使用<code>|</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">toString2</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>交叉类型表示取值同时属于多种类型，使用<code>&amp;</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a5<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>a5 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'haha'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="具体类型："><a href="#具体类型：" class="headerlink" title="具体类型："></a>具体类型：</h2><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>例子</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型（不安全）</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr><tr><td align="center">null和undefined</td><td align="center">空</td><td align="center">所有类型的子类型</td></tr></tbody></table><ul><li><p>number</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 十进制</span><span class="token keyword">let</span> hex<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 十六进制</span><span class="token keyword">let</span> binary<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 二进制</span><span class="token keyword">let</span> octal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 八进制</span><span class="token keyword">let</span> big<span class="token punctuation">:</span> bigint <span class="token operator">=</span> 100n<span class="token punctuation">;</span></code></pre></li><li><p>boolean</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre></li><li><p>string</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">let</span> fullName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bob Bobbington`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span><span class="token punctuation">;</span></code></pre></li><li><p>null和undefined</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span></code></pre><p><strong>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code>赋值给任何类型的变量。</strong>（需要在tsconfig.json中关闭严格模式<code>"strict": false</code> ）</p></li><li><p>字面量</p><blockquote><p>作用：确定变量的具体取值范围</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'black'</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以限定num的范围只在1~5</span></code></pre></li><li><p>any</p><p>any类型可赋给任意类型的变量，因此可能造成错误，不安全</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>n <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 编译通过，但有安全隐患</span></code></pre></li><li><p>unknown</p><p>unknown类型变量不能随意赋值，安全</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> what3<span class="token punctuation">:</span> unknown<span class="token punctuation">;</span><span class="token keyword">let</span> what4<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token keyword">let</span> what2<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> what4<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    正常</span>what2 <span class="token operator">=</span> what3<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 报错，不能将类型“unknown”分配给类型“number”。</span></code></pre></li><li><p>void</p><p>void常用于函数返回类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre></li><li><p>never</p><p>never可用于函数报错</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>object</p><p>没啥用，一般会更具体的声明类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>array</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 两种方式</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// type[] 方式</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 泛型方式</span></code></pre></li><li><p>tuple</p><p>适用于已知元素数量和类型的数组，而各元素的类型有不相同的情况</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </code></pre></li><li><p>enum</p><blockquote><p>个人认为与数据相反，数据：数字索引映射data；枚举：data映射数字</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 为一组数值赋予友好的名字</span>  Red<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 默认情况下，从0开始为元素编号</span>  Green<span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 可以手动的指定成员的数值</span>  Green<span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 由枚举的值得到它的名字 > Red</span></code></pre></li></ul><h1 id="3-编译选项"><a href="#3-编译选项" class="headerlink" title="3.编译选项"></a>3.编译选项</h1><h3 id="自动编译单个文件"><a href="#自动编译单个文件" class="headerlink" title="自动编译单个文件"></a>自动编译单个文件</h3><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p><pre class=" language-powershell"><code class="language-powershell">  tsc xxx<span class="token punctuation">.</span>ts <span class="token operator">-</span>w</code></pre><h3 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h3><pre class=" language-powershell"><code class="language-powershell">tsc <span class="token operator">-</span>w</code></pre><p><strong>前提是项目根目录下有ts的配置文件 tsconfig.json</strong></p><pre class=" language-powershell"><code class="language-powershell">tsc <span class="token operator">--</span>init</code></pre><p>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 <code>tsc</code> 命令即可完成对整个项目的编译</p><h3 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h3><blockquote><p><code>**</code>  =&gt;所有文件夹；<code>*</code>  =&gt; 所有文件</p></blockquote><h4 id="include"><a href="#include" class="headerlink" title="include"></a><strong>include</strong></h4><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**/*“]</li></ul><pre class=" language-json"><code class="language-json">  <span class="token property">"include"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">,</span> <span class="token string">"tests/**/*"</span><span class="token punctuation">]</span></code></pre><h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a><strong>exclude</strong></h4><ul><li>定义需要排除在外的目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><pre class=" language-json"><code class="language-json">  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/hello/**/*"</span><span class="token punctuation">]</span></code></pre><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h4><ul><li>定义要扩展的配置文件</li></ul><pre class=" language-json"><code class="language-json"><span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./configs/base"</span></code></pre><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p><h4 id="files"><a href="#files" class="headerlink" title="files"></a><strong>files</strong></h4><ul><li>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></li></ul><pre class=" language-json"><code class="language-json"><span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"core.ts"</span><span class="token punctuation">,</span>    <span class="token string">"sys.ts"</span><span class="token punctuation">,</span>    <span class="token string">"types.ts"</span><span class="token punctuation">,</span>    <span class="token string">"scanner.ts"</span><span class="token punctuation">,</span>    <span class="token string">"parser.ts"</span><span class="token punctuation">,</span>    <span class="token string">"utilities.ts"</span><span class="token punctuation">,</span>    <span class="token string">"binder.ts"</span><span class="token punctuation">,</span>    <span class="token string">"checker.ts"</span><span class="token punctuation">,</span>    <span class="token string">"tsc.ts"</span>  <span class="token punctuation">]</span></code></pre><h4 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a><strong>compilerOptions</strong></h4><ul><li><p>target</p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</p><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span>        // 编译为ES6<span class="token punctuation">}</span></code></pre></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：DOM、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、WebWorker、ScriptHost ……</p><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token string">"DOM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/aa.js"</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>module</p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：CommonJS、UMD、AMD、System、ES2020、ESNext、None</p><pre class=" language-typescript"><code class="language-typescript"><span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span>    //    设置后编译后的js文件将会生成到dist目录<span class="token punctuation">}</span></code></pre></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中，为其他模块化规范则不起作用</p><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/app.js"</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录</p></li><li><p>默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li></ul></li></ul><pre><code>  ```json  "compilerOptions": {      "rootDir": "./src"  }  ```</code></pre><ul><li><p>allowJs</p><ul><li>是否对js文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对js文件进行检查</p><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码进行编译，只检查语法</li><li>默认值：false</li></ul></li></ul><ul><li><p>noEmitOnError</p><ul><li><p>有错误的情况下不进行编译</p></li><li><p>默认值：false</p></li><li><p>sourceMap</p><ul><li>是否生成sourceMap</li></ul></li><li><p>默认值：false</p></li></ul></li></ul><p>严格检查</p><ul><li><p>strict ：启用<strong>所有</strong>的严格检查，默认值为true，设置后相当于开启了后面所有的严格检查</p></li><li><p>alwaysStrict ：总是以严格模式对代码进行编译</p></li><li><p>noImplicitAny ：禁止隐式的any类型</p></li><li><p>noImplicitThis ：禁止类型不明确的this</p></li><li><p>strictBindCallApply ：严格检查bind、call和apply的参数列表</p></li><li><p>strictFunctionTypes ：严格检查函数的类型</p></li><li><p>strictNullChecks ：严格的空值检查</p></li><li><p>strictPropertyInitialization ：严格检查属性是否初始化</p></li></ul><p>额外检查</p><ul><li><p>noFallthroughCasesInSwitch：检查switch语句包含正确的break</p></li><li><p>noImplicitReturns：检查函数没有隐式的返回值</p></li><li><p>noUnusedLocals：检查未使用的局部变量</p></li><li><p>noUnusedParameters：检查未使用的参数</p></li><li><p>allowUnreachableCode：检查不可达代码</p></li></ul><h1 id="TypeScript打包"><a href="#TypeScript打包" class="headerlink" title="TypeScript打包"></a>TypeScript打包</h1><h3 id="webpack整合"><a href="#webpack整合" class="headerlink" title="webpack整合"></a>webpack整合</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>进入项目根目录，执行命令 <code> npm init -y</code>，创建package.json文件</p><h4 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h4><pre><code>npm install -D webpack                             //    构建工具webpackwebpack-cli                     //    webpack的命令行工具webpack-dev-server         //    webpack的开发服务器typescript                         //    ts编译器ts-loader                         //    ts加载器，用于在webpack中编译ts文件clean-webpack-plugin  //    用来自动创建html文件html-webpack-plugin      //    每次构建都会先清除目录cross-env                            //    统一环境变量</code></pre><h4 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h4><p>根目录下创建webpack的配置文件<code>webpack.config.js</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>CleanWebpackPlugin<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> isProd <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token comment" spellcheck="true">// 是否生产环境</span><span class="token keyword">function</span> resolve <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> mode<span class="token punctuation">:</span> isProd <span class="token operator">?</span> <span class="token string">'production'</span> <span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>   app<span class="token punctuation">:</span> <span class="token string">'./src/main.ts'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> output<span class="token punctuation">:</span> <span class="token punctuation">{</span>   path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   filename<span class="token punctuation">:</span> <span class="token string">'[name].[contenthash:8].js'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{</span>       test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/</span><span class="token punctuation">,</span>       use<span class="token punctuation">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>       include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>   extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.tsx'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> devtool<span class="token punctuation">:</span> isProd <span class="token operator">?</span> <span class="token string">'cheap-module-source-map'</span> <span class="token punctuation">:</span> <span class="token string">'cheap-module-eval-source-map'</span><span class="token punctuation">,</span> devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>   host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 主机名</span>   stats<span class="token punctuation">:</span> <span class="token string">'errors-only'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包日志输出输出错误信息</span>   port<span class="token punctuation">:</span> <span class="token number">8081</span><span class="token punctuation">,</span>   open<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h4 id="配置TS编译选项"><a href="#配置TS编译选项" class="headerlink" title="配置TS编译选项"></a>配置TS编译选项</h4><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>       <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>       <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="修改package-json配置"><a href="#修改package-json配置" class="headerlink" title="修改package.json配置"></a>修改package.json配置</h4><p>修改package.json添加如下配置</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   ...   <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>      <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js"</span><span class="token punctuation">,</span>            <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   ...<span class="token punctuation">}</span></code></pre><h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译；</p><p>或者执行<code>npm run dev</code>来启动开发服务器；</p><br><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了webpack，开发中还经常需要结合babel来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；</p><blockquote><p>  虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>  对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</p></blockquote><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre><code>npm install @babel/core                 //    babel的核心工具@babel/preset-env     //    babel的预定义环境babel-loader                 //    babel在webpack中的加载器core-js                          //    core-js用来使老版本的浏览器支持新版ES语法</code></pre><h4 id="修改webpack-config-js配置文件"><a href="#修改webpack-config-js配置文件" class="headerlink" title="修改webpack.config.js配置文件"></a>修改webpack.config.js配置文件</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">[</span>                                <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>                                    <span class="token string">"targets"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                                        <span class="token string">"chrome"</span><span class="token punctuation">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                        <span class="token string">"ie"</span><span class="token punctuation">:</span> <span class="token string">"11"</span>                                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token string">"corejs"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span>                                    <span class="token string">"useBuiltIns"</span><span class="token punctuation">:</span> <span class="token string">"usage"</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">]</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><p>如此一来，使用ts编译后的文件将会再次被babel处理；</p><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的targets中指定要兼容的浏览器版本；</p><h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8. 函数"></a>8. 函数</h1><p>函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> myAdd2<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">let</span> myAdd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 能自动推断myAdd类型</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。TypeScript 能够根据返回语句自动推断出返回值类型。</p><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p>TypeScript 里的每个函数参数都是必须的。 这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数类型和个数必须与函数期望的一致。</p><p>JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 <code>undefined</code>。 在TypeScript 里我们可以在参数名旁使用 <code>?</code> 实现可选参数的功能。 比如，我们想让 <code>lastName</code> 是可选的：</p><p>在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 <code>undefined</code> 时。 它们叫做有默认初始化值的参数。比如，把<code>firstName</code> 的默认值设置为 <code>"A"</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> lastName  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> firstName  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">buildName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 <code>arguments</code> 来访问所有传入的参数。</p><p>在 TypeScript 里，你可以把所有参数收集到一个变量里：<br>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ <code>...</code>）后面给定的名字，你可以在函数体内使用这个数组。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span></code></pre><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><blockquote><p>自我思考：typescript和java的重载不同。出发点不同：ts从js出发，js本身传值就是任意类型的，ts重载就是为了限制函数传值类型的范围，而java传值有类型，java重载是为了扩充函数传值类型的范围。</p></blockquote><p>函数重载: 函数名相同, 而形参不同的多个函数</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 需求: 我们有一个add函数，它可以接收2个string类型的参数进行拼接，也可以接收2个number类型的参数进行相加 */</span><span class="token comment" spellcheck="true">// 重载函数声明</span><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token comment" spellcheck="true">// 定义函数实现</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 x + y</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(add(1, 'a')) // error</span></code></pre><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    属性名<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    可以使用`constructor`定义一个构造器方法；</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 参数<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>  <strong>注1：TS中只能有一个构造器方法！</strong></p></blockquote><p><strong>属性可位于花括号内</strong></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>也可以直接将属性定义在构造函数中：</strong></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面两种定义方法是完全相同的！</p><blockquote></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//    如果在X类中不调用super将会报错！</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="属性修饰"><a href="#属性修饰" class="headerlink" title="属性修饰"></a>属性修饰</h3><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><ul><li>public(默认值)： 公开的外部也可以访问</li></ul><ul><li><p>protected ：类内部和子类可以访问</p></li><li><p>private ：只能类内部可以访问</p></li></ul><ul><li><p>静态属性（static）：声明为static的属性或方法不再属于实例，而是属于类的属性；</p></li><li><p>可选属性（?）：</p><ul><li>是可以对可能存在的属性进行预定义</li><li>是可以捕获引用了不存在的属性时的错误。</li></ul></li><li><p>只读属性（readonly）：</p><ul><li><p>将属性设置为只读的， 只读属性必须在<strong>默认声明</strong>时或<strong>构造函数</strong>里被初始化。</p></li><li><p>readonly与const：作为变量使用的话用 <code>const</code>，若作为属性则使用 <code>readonly</code></p></li></ul></li></ul><h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p>TypeScript 支持通过 <code>getters/setters</code> 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> _name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>      <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                      <span class="token comment" spellcheck="true">// 取</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//    存</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实际通过调用getter方法读取name属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 实际通过调用setter方法修改name属性 p1.name = '猪八戒'; </span></code></pre><h3 id="修饰参数属性（语法糖）"><a href="#修饰参数属性（语法糖）" class="headerlink" title="修饰参数属性（语法糖）"></a>修饰参数属性（语法糖）</h3><p>参数属性可以方便地让我们在constructor的参数列表里定义并初始化属性</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不再需要声明name属性并赋值，自动对应赋值</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p>参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用<code>public</code>、<code>protected</code>、<code>private</code>、<code>readonly</code>都会在类中添加一个属性，但不包括<code>static</code></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承时面向对象中的又一个特性方法</p><p>通过继承可以将其他类中的属性和方法引入到当前类中，通过<code>super</code>访问父类的属性</p><p>经典示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> run </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 必须调用父类型构造方法</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 重写父类型的方法</span>  run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sliding...'</span><span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用父类型构造方法</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 重写父类型的方法</span>  run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dashing...'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 子类中可以使用super来完成对父类的引用</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  xxx <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xxx()'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> snake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">'sn'</span><span class="token punctuation">)</span>snake<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> horse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">'ho'</span><span class="token punctuation">)</span>horse<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 父类型引用指向子类型的实例 ==> 多态</span><span class="token keyword">const</span> tom<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">'ho22'</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 如果子类型没有扩展的方法, 可以让子类型引用指向父类型的实例 */</span><span class="token keyword">const</span> tom3<span class="token punctuation">:</span> Snake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'tom3'</span><span class="token punctuation">)</span>tom3<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 如果子类型有扩展的方法, 不能让子类型引用指向父类型的实例 */</span><span class="token comment" spellcheck="true">// const tom2: Horse = new Animal('tom2')</span><span class="token comment" spellcheck="true">// tom2.run()</span></code></pre><p><strong>注2：子类继承父类时，必须调用父类的构造方法(super)！</strong></p><p>通过继承可以在不修改类的情况下完成对类的扩展</p><p> <em>子类</em>  -&gt;派生类</p><p><em>超类</em>  -&gt; 基类</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类（abstract class）是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>   abstract <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>   <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'狗在跑~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，</p></li><li><p>继承抽象类时抽象方法必须要实现;</p></li><li><p>不能创建实例对象, 只有实现类才能创建实例</p></li></ul><h1 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h1><ul><li>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，都是抽象属性方法；而接口可以有实值</li><li>接口是类的结构规范：对象只有<strong>包含</strong>(&gt;=)接口中定义的所有属性和方法时才能匹配接口；</li><li>可以让一个类去实现接口，实现接口时类中要实现接口中的所有属性方法；</li><li>类似类型别名（type），但类型别名不能重复命名，接口可以</li><li>一个类可以实现多个接口，用逗号隔开</li><li>接口可以继承（extends）接口</li></ul><p>用处：</p><ul><li>作为类类型检查对象类型：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>per<span class="token punctuation">:</span> Person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// here</span>    per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, 我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>作为类类型表示需实现的规范：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好，我是'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>作为函数类型</li></ul><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 接口可以描述函数类型(参数的类型与返回的类型)</span><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">}</span></code></pre><p>这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> mySearch<span class="token punctuation">:</span> SearchFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> sub<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mySearch</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'bc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h1><blockquote><p>泛型就是类型变量</p></blockquote><p>使用情景：无法确定函数和类中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><h4 id="创建泛型函数"><a href="#创建泛型函数" class="headerlink" title="创建泛型函数"></a>创建泛型函数</h4><p>可以同时指定多个泛型，泛型间使用<strong>逗号</strong>隔开：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token punctuation">,</span>E<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;T>就是泛型，表示某个类型；</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h4><h5 id="方式一（直接使用，自动推断）："><a href="#方式一（直接使用，自动推断）：" class="headerlink" title="方式一（直接使用，自动推断）："></a>方式一（直接使用，自动推断）：</h5><p>使用时可以直接传递参数使用，<strong>类型会由TS自动推断出来</strong>，但有时编译器无法自动推断时还需要使用下面的方式</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h5 id="方式二（指定类型）："><a href="#方式二（指定类型）：" class="headerlink" title="方式二（指定类型）："></a>方式二（指定类型）：</h5><p>也可以在函数后手动指定泛型；</p><pre class=" language-typescript"><code class="language-typescript">test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>类中同样可以使用泛型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  prop<span class="token punctuation">:</span> T<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>prop<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> prop<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>在定义接口时, 为接口中的属性或方法定义泛型类型<br>在使用接口时, 再指定具体的泛型类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IbaseCRUD</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span>  add<span class="token punctuation">:</span> <span class="token punctuation">(</span>t<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  getById<span class="token punctuation">:</span> <span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id主键自增</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//年龄</span>  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserCRUD</span> <span class="token keyword">implements</span> <span class="token class-name">IbaseCRUD</span> <span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>user<span class="token punctuation">,</span> id<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存user'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> User <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id<span class="token operator">===</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> userCRUD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserCRUD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>userCRUD<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>userCRUD<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'tom2'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userCRUD<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><h3 id="泛型继承-约束"><a href="#泛型继承-约束" class="headerlink" title="泛型继承(约束)"></a>泛型继承(约束)</h3><p>除此之外，也可以对泛型的范围进行约束</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">MyInter</span><span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">MyInter</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用；</p><h1 id="10-其它"><a href="#10-其它" class="headerlink" title="10. 其它"></a>10. 其它</h1><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</p><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 <code>jQuery</code>，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。</p><p>但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ERROR: Cannot find name 'jQuery'.</span></code></pre><p>如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</p><p>可以自己写声明语句：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">var</span> jQuery<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但通常是下载声明文件到node_modules的@types中，很多的第三方库都定义了对应的声明文件库, 库文件名一般为 <code>@types/xxx</code>，有的第三库在下载时就会自动下载对应的声明文件库(比如: webpack),有的可能需要单独下载(比如jQuery/react)</p><pre><code>npm install @types/jquery --save-dev</code></pre><p>声明文件: 把声明语句放到一个单独的xxx.d.ts文件（jQuery.d.ts）中,将声明语句定义其中,  TS编译器会扫描并加载项目中所有的TS声明文件</p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p><p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><ol><li>ECMAScript 的内置对象</li></ol><blockquote><p>Boolean<br>Number<br>String<br>Date<br>RegExp<br>Error</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 1. ECMAScript 的内置对象 */</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token keyword">let</span> s<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">let</span> d<span class="token punctuation">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> r<span class="token punctuation">:</span> RegExp <span class="token operator">=</span> <span class="token regex">/^1/</span><span class="token keyword">let</span> e<span class="token punctuation">:</span> Error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error message'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// let bb: boolean = new Boolean(2)  // error</span></code></pre><ol><li>BOM 和 DOM 的内置对象</li></ol><blockquote><p>Window<br>Document<br>HTMLElement<br>DocumentFragment<br>Event<br>NodeList</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> div<span class="token punctuation">:</span> HTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">const</span> divs<span class="token punctuation">:</span> NodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> fragment<span class="token punctuation">:</span> DocumentFragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> 类型检查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack笔记</title>
      <link href="/10-webpack-bi-ji.html"/>
      <url>/10-webpack-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h1 id="webpack笔记"><a href="#webpack笔记" class="headerlink" title="webpack笔记"></a>webpack笔记</h1><h2 id="第-1-章：-webpack-简介"><a href="#第-1-章：-webpack-简介" class="headerlink" title="第 1 章： webpack 简介"></a>第 1 章： webpack 简介</h2><h3 id="1-1-webpack-是什么"><a href="#1-1-webpack-是什么" class="headerlink" title="1. 1 webpack 是什么"></a>1. 1 webpack 是什么</h3><p>webpack是一种前端资源构建工具，一个静态模块打包器(modulebundler)。在webpack看来,前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p><blockquote><p><strong>入口文件引入依赖  =&gt;  chunk，编译后 =&gt;  bundle</strong></p></blockquote><h3 id="1-2-webpack-五个核心概念"><a href="#1-2-webpack-五个核心概念" class="headerlink" title="1. 2 webpack 五个核心概念"></a>1. 2 webpack 五个核心概念</h3><ol><li><h4 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h4><p>入口(Entry)指示 webpack以哪个文件为入口起点开始打包，分析构建内部依赖图。</p></li><li><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>输出(Output)指示 webpack打包后的资源 bundles 输出到哪里去，以及如何命名。</p></li><li><h4 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h4><p>Loader让webpack能够去处理那些非JavaScript 文件(webpack 自身只理解JavaScript)</p></li><li><h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。</p></li><li><h4 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h4><p>模式(Mode)指示webpack使用相应模式的配置。</p></li></ol><table><thead><tr><th align="center">选项</th><th align="left">描述</th><th align="left">特点</th></tr></thead><tbody><tr><td align="center">development</td><td align="left">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置 为 development。<br>启用 NamedChunksPlugin 和 NamedModulesPlugin</td><td align="left">能让代码本地调试 运行的环境</td></tr><tr><td align="center">production</td><td align="left">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。<br>启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin</td><td align="left">能让代码优化上线 运行的环境</td></tr></tbody></table><h2 id="第-2-章：-webpack初体验"><a href="#第-2-章：-webpack初体验" class="headerlink" title="第 2 章： webpack初体验"></a>第 2 章： webpack初体验</h2><h3 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2. 1 初始化配置"></a>2. 1 初始化配置</h3><ol><li><p>初始化package.json：<code>npm init</code></p></li><li><p>下载并安装webpack：<code>npm install webpack webpack-cli -D</code></p></li></ol><h3 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2. 2 编译打包应用"></a>2. 2 编译打包应用</h3><ol start="2"><li><p>运行指令</p><p>​    开发环境指令：<code>webpack --entry src/js/index.js -o build/js/built.js --mode=development</code></p><p>​    功能：webpack本身只能够编译打包js和json文件，并且能将es6的模块化语法转换成浏览器能识别的语法。</p><p>​    生产环境指令：<code>webpack --entry src/js/index.js -o build/js/built.js --mode=production</code></p><p>​    功能：在开发配置功能上多一个代码压缩。</p></li><li><p>结论</p><ul><li>webpack能够编译打包压缩js和json文件</li><li>能将es6 的<strong>模块化语法</strong>转换成浏览器能识别的语法</li></ul></li><li><p>问题</p><ul><li>不能编译打包css、img等文件</li><li>不能将js的es6<strong>基本语法</strong>转化为es5 以下语法。</li></ul></li></ol><h2 id="第-3-章：webpack-开发环境的基本配置"><a href="#第-3-章：webpack-开发环境的基本配置" class="headerlink" title="第 3 章：webpack 开发环境的基本配置"></a>第 3 章：webpack 开发环境的基本配置</h2><h3 id="3-1-创建配置文件"><a href="#3-1-创建配置文件" class="headerlink" title="3. 1 创建配置文件"></a>3. 1 创建配置文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//node内置核心模块，用来处理路径问题</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出配置</span>    filename<span class="token punctuation">:</span> <span class="token string">'built.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//输出文件名</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build/js'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出文件路径配置</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span>    <span class="token comment" spellcheck="true">//开发环境</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-打包样式资源"><a href="#3-2-打包样式资源" class="headerlink" title="3. 2 打包样式资源"></a>3. 2 打包样式资源</h3><ol><li><p>下载安装loader包： <code>npm i css-loader style-loader less-loader less -D</code></p></li><li><p>修改配置文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token comment" spellcheck="true">//loader的配置</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">//不同文件必须配置不同loader处理</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//匹配哪些文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token comment" spellcheck="true">//使用哪些loader进行处理，从右到左，从下到上依次执行</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//将外联css变成内联style标签引入</span>          <span class="token string">'css-loader'</span>    <span class="token comment" spellcheck="true">//将css文件变成commonjs模块加载到js中，其内容是样式字符串</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//将less文件编译成css文件</span>          <span class="token comment" spellcheck="true">//需要下载less-loader和less</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="3-3-打包-HTML-资源"><a href="#3-3-打包-HTML-资源" class="headerlink" title="3. 3 打包 HTML 资源"></a>3. 3 打包 HTML 资源</h3><ol><li><p>下载安装plugin包： <code>npm install --save-dev html-webpack-plugin</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constHtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//plugins的配置</span>    <span class="token comment" spellcheck="true">//html-webpack-plugin</span>    <span class="token comment" spellcheck="true">//功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span>    <span class="token comment" spellcheck="true">//需求：需要有结构的HTML文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//复制'./src/index.html'文件，并自动引入打包输出的所有资源（JS/CSS）</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="3-4-打包其他资源"><a href="#3-4-打包其他资源" class="headerlink" title="3.4 打包其他资源"></a>3.4 打包其他资源</h3><blockquote><h4 id="url-loader和file-loader已经弃用，请使用webpack的资源模块"><a href="#url-loader和file-loader已经弃用，请使用webpack的资源模块" class="headerlink" title="url-loader和file-loader已经弃用，请使用webpack的资源模块"></a><strong>url-loader和file-loader已经弃用，请使用<a href="https://webpack.docschina.org/guides/asset-modules/">webpack的资源模块</a></strong></h4></blockquote><h3 id="3-4-打包图片资源"><a href="#3-4-打包图片资源" class="headerlink" title="3. 4 打包图片资源"></a><del>3. 4 打包图片资源</del></h3><ol><li><p><del>下载安装loader包:  npm install –save-dev html-loader url-loader file-loader</del></p></li><li><p><del>修改配置文件</del></p></li></ol><h3 id="3-5-打包其他资源"><a href="#3-5-打包其他资源" class="headerlink" title="3. 5 打包其他资源"></a><del>3. 5 打包其他资源</del></h3><ol><li><del>修改配置文件</del></li></ol><h3 id="3-6-devserver"><a href="#3-6-devserver" class="headerlink" title="3. 6 devserver"></a>3. 6 devserver</h3><p><a href="https://webpack.docschina.org/guides/development/#using-webpack-dev-server">安装</a>：<code>npm install --save-dev webpack-dev-server</code></p><p><a href="https://github.com/webpack/webpack-dev-server">运行指令</a>: <code>webpack serve</code></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//项目构建后路径</span>    contentBase<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//启动gzip压缩</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//端口号</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//自动打开浏览器</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-7-开发环境配置总结"><a href="#3-7-开发环境配置总结" class="headerlink" title="3. 7 开发环境配置总结"></a>3. 7 <strong>开发环境配置总结</strong></h3><p>运行指令: <code>webpack serve</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constHtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/js/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'js/built.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            postcssOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>              plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//将less文件编译成css文件</span>          <span class="token comment" spellcheck="true">//需要下载less-loader和less</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/i</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// test: /\.(png|jpg|gif)$/i,     // 打包图片</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/\.(js|html|css)$/i</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 打包其他资源，包括图片</span>        type<span class="token punctuation">:</span> <span class="token string">'asset'</span><span class="token punctuation">,</span>        parser<span class="token punctuation">:</span> <span class="token punctuation">{</span>          dataUrlCondition<span class="token punctuation">:</span> <span class="token punctuation">{</span>            maxSize<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="第-4-章：-webpack-生产环境的基本配置"><a href="#第-4-章：-webpack-生产环境的基本配置" class="headerlink" title="第 4 章： webpack 生产环境的基本配置"></a>第 4 章： webpack 生产环境的基本配置</h2><h3 id="4-1-提取-css-成单独文件"><a href="#4-1-提取-css-成单独文件" class="headerlink" title="4. 1 提取 css 成单独文件"></a>4. 1 提取 css 成单独文件</h3><ol start="2"><li><p>下载插件: <code>npm install --save-dev mini-css-extract-plugin</code></p></li><li><p>修改配置文件</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">//创建style标签，将样式放入</span>          <span class="token comment" spellcheck="true">//'style-loader',</span>          <span class="token comment" spellcheck="true">//这个loader取代style-loader。作用：提取js中的css成单独文件</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//将css文件整合到js文件中</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//对输出的css文件进行重命名</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/built.css'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="4-2-css-兼容性处理"><a href="#4-2-css-兼容性处理" class="headerlink" title="4. 2 css 兼容性处理"></a>4. 2 css 兼容性处理</h3><blockquote><p>默认看生产环境<br>设置开发环境：<code>process.env.NODE_ENV = 'development'</code></p></blockquote><ol start="2"><li><p>下载loader: <code>npm install --save-dev postcss-loader postcss-preset-env</code></p></li><li><p>修改配置文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置nodejs环境变量</span><span class="token comment" spellcheck="true">//process.env.NODE_ENV='development';</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              postcssOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">[</span>                    <span class="token string">"postcss-preset-env"</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改package.json</p></li></ol><pre class=" language-json"><code class="language-json"><span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"last 1 chromeversion"</span><span class="token punctuation">,</span>    <span class="token string">"last 1 firefoxversion"</span><span class="token punctuation">,</span>    <span class="token string">"last 1 safariversion"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"> 0. 2 %"</span><span class="token punctuation">,</span>      <span class="token string">"notdead"</span><span class="token punctuation">,</span>      <span class="token string">"notop_miniall"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-压缩-css"><a href="#4-3-压缩-css" class="headerlink" title="4. 3 压缩 css"></a>4. 3 <a href="https://webpack.docschina.org/plugins/css-minimizer-webpack-plugin/#getting-started">压缩 css</a></h3><ol><li><p>下载安装包: <code>npm install css-minimizer-webpack-plugin --save-dev</code></p></li><li><p>修改配置文件</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="4-4-js-语法检查"><a href="#4-4-js-语法检查" class="headerlink" title="4. 4 js 语法检查"></a>4. 4 js 语法检查</h3><blockquote><p>改为 eslint-webpack-plugin</p></blockquote><ol><li><p>下载安装包：<code>npm install--save-dev eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import</code></p></li><li><p>修改配置文件</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// mode: 'development',</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        alwaysWriteToDisk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fix: true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>配置package.json</p><pre class=" language-json"><code class="language-json"><span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"airbnb-base"</span><span class="token punctuation">,</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="4-5-js-兼容性处理"><a href="#4-5-js-兼容性处理" class="headerlink" title="4. 5 js 兼容性处理"></a>4. 5 js 兼容性处理</h3><blockquote><p>​     <em>js兼容性处理：babel-loader @babel/core</em> </p><ol><li><p>基本js兼容性处理 –&gt; @babel/preset-env</p></li><li><p>问题：只能转换基本语法，如promise高级语法不能转换*    </p><p>全部js兼容性处理 –&gt; @babel/polyfill</p></li><li><p><em>问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</em></p><p>需要做兼容性处理的就做：按需加载 –&gt; core-js</p></li></ol></blockquote><ol><li><p>下载安装包：<code>npm install --save-dev babel-loader @babel/core @babel/preset-env @babel/polyfill core-js</code></p></li><li><p>修改配置文件</p><pre class=" language-JavaScript"><code class="language-JavaScript">const { resolve } = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = {  module: {    rules: [      {        test: /\.js$/,        exclude: /node_modules/,        loader: 'babel-loader',        options: {          //预设：指示babel做怎么样的兼容性处理          presets: [            [              '@babel/preset-env',              {                //按需加载                useBuiltIns: 'usage',                //指定core-js版本                corejs: {                  version: 3                },                //指定兼容性做到哪个版本浏览器                targets: {                  chrome: ' 60 ',                  firefox: ' 60 ',                  ie: ' 9 ',                  safari: ' 10 ',                  edge: ' 17 '                }              }]]        }      }]  }};</code></pre></li></ol><h3 id="4-6-js-压缩"><a href="#4-6-js-压缩" class="headerlink" title="4. 6 js 压缩"></a>4. 6 js 压缩</h3><blockquote><p>webpack自带<a href="https://webpack.docschina.org/plugins/terser-webpack-plugin/">TerserWebpackPluginhttps</a></p></blockquote><ol start="2"><li><p>修改配置文件</p><pre class=" language-JavaScript"><code class="language-JavaScript">module.exports = {  //生产环境下会自动压缩js代码  mode: 'production'};</code></pre></li></ol><h3 id="4-7-HTML压缩"><a href="#4-7-HTML压缩" class="headerlink" title="4. 7 HTML压缩"></a>4. 7 HTML压缩</h3><blockquote><p><a href="https://github.com/jantimon/html-webpack-plugin#minification">生产环境下自动打开</a></p></blockquote><ol><li><p>修改配置文件</p><pre class=" language-JavaScript"><code class="language-JavaScript">module.exports = {  plugins: [    new HtmlWebpackPlugin({      template: './src/index.html',      //压缩html代码      minify: {        //移除空格        collapseWhitespace: true,        //移除注释        removeComments: true      }    })  ],  mode: 'production'};</code></pre></li></ol><h3 id="4-8-生产环境配置"><a href="#4-8-生产环境配置" class="headerlink" title="4. 8 生产环境配置"></a>4. 8 生产环境配置</h3><ol><li><p>创建文件</p></li><li><p>修改配置文件</p><pre class=" language-JavaScript"><code class="language-JavaScript">const { resolve } = require('path')const HtmlWebpackPlugin = require('html-webpack-plugin');const MiniCssExtractPlugin = require('mini-css-extract-plugin');const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');const ESLintPlugin = require('eslint-webpack-plugin');module.exports = {  // mode: 'development',  mode: 'production',  entry: '/src/index.js',  output: {    filename: 'build.js',    path: resolve(__dirname, "dist/"),    publicPath: '',    assetModuleFilename: 'images/[name]-[hash][ext][query]',  },  module: {    rules: [      {        test: /\.css$/i,        use: [MiniCssExtractPlugin.loader, "css-loader", {          loader: "postcss-loader",          options: {            postcssOptions: {              plugins: [                [                  "postcss-preset-env",                ]              ],            },          },        }],      },      {        test: /\.less$/,        use: [          'style-loader',          'css-loader',          //将less文件编译成css文件          //需要下载less-loader和less          'less-loader'        ]      },      {        test: /\.html$/i,        loader: 'html-loader',      },      {        // test: /\.(png|jpg|gif)$/i,          // 打包图片        exclude: /\.(js|html|css|less)$/i,     // 打包其他资源，包括图片        type: 'asset',        parser: {          dataUrlCondition: {            maxSize: 8 * 1024          }        },      },      {        test: /\.m?js$/,        exclude: /(node_modules|bower_components)/,        use: {          loader: 'babel-loader',          options: {            presets: [['@babel/preset-env', {              // 按需加载              useBuiltIns: 'usage',              // 指定core-js版本              corejs: {                version: 3              },              // 指定兼容性做到哪个版本浏览器              targets: {                chrome: '60',                firefox: '60',                ie: '9',                safari: '10',                edge: '17'              }            }]]          }        }      }    ],  },  plugins: [new HtmlWebpackPlugin({    alwaysWriteToDisk: true,    template: resolve(__dirname, 'src/index.html'),    filename: 'index.html',  }), new MiniCssExtractPlugin()],  optimization: {    minimize: true,    minimizer: [      new CssMinimizerPlugin(),      new ESLintPlugin()    ],  },  devServer: {    contentBase: resolve(__dirname, '/dist'), //打包后监听的目录，    compress: true,    port: 9000,    open: true,  }}</code></pre></li></ol><p>正常来讲，一个文件只能被一个loader处理。<br>当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</p><pre class=" language-JavaScript"><code class="language-JavaScript">// 先执行eslint在执行babel{  rules: [    {      //在package.json中eslintConfig-->airbnb      test: /\.js$/,      exclude: /node_modules/,      //优先执行      enforce: 'pre',        // pre => 先加载， post => 后加载      loader: 'eslint-loader',      options: {        fix: true      }    },    {      test: /\.js$/,      exclude: /node_modules/,      loader: 'babel-loader',      options: {        presets: [          [            '@babel/preset-env',            {              useBuiltIns: 'usage',              corejs: { version: 3 },              targets: {                chrome: ' 60 ',                firefox: ' 50 '              }            }          ]        ]      }    },    {      test: /\.(jpg|png|gif)/,      loader: 'url-loader',      options: {        limit: 8 * 1024,        name: '[hash: 10 ].[ext]',        outputPath: 'imgs',        esModule: false      }    },    {      test: /\.html$/,      loader: 'html-loader'    },    {      exclude: /\.(js|css|less|html|jpg|png|gif)/,      loader: 'file-loader',      options: {        outputPath: 'media'      }    }  ];  plugins: [    newMiniCssExtractPlugin({      filename: 'css/built.css'    }),    newOptimizeCssAssetsWebpackPlugin(),    newHtmlWebpackPlugin({      template: './src/index.html',      minify: {        collapseWhitespace: true,        removeComments: true      }    })  ];  mode: 'production'}</code></pre><h2 id="第-5-章：-webpack-优化配置-重点"><a href="#第-5-章：-webpack-优化配置-重点" class="headerlink" title="第 5 章： webpack 优化配置(重点)"></a><strong>第 5 章： webpack 优化配置(重点)</strong></h2><blockquote><ol><li>开发环境性能优化<ol><li>优化打包构建速度  =&gt;  HMR</li><li>优化代码调试   =&gt;  source-map</li></ol></li><li>生产环境性能优化<ol><li>优化打包构建速度<ol><li>oneOf</li><li>babel缓存</li><li>多进程打包</li><li>externals</li><li>dll</li></ol></li><li>优化代码运行的性能<ol><li>持久化缓存(hash-chunkhash-contenthash)</li><li>tree shaking</li><li>code split</li><li>懒加载/预加载</li><li>pwa</li></ol></li></ol></li></ol></blockquote><h3 id="5-1-HMR-hot-module-replacement-热模替换"><a href="#5-1-HMR-hot-module-replacement-热模替换" class="headerlink" title="5. 1 HMR( hot module replacement 热模替换)"></a>5. 1 HMR( hot module replacement 热模替换)</h3><p>作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）<br>极大提升构建速度</p><ol><li><p>样式文件：可以使用HMR功能：因为<code>style-loader</code>内部实现了</p></li><li><p>js文件：默认不能使用HMR功能 –&gt; 需要修改js代码，添加支持HMR功能的代码</p><pre><code>注意：HMR功能对js的处理，只能处理非入口js文件的其他文件。</code></pre><pre><code>if (module.hot) {  module.hot.accept('./js/print.js /*要监视的模块路径*/', callback)}</code></pre></li><li><p>html文件: 不能使用HMR功能.同时会导致问题：html文件不能热更新了~ （不用做HMR功能）</p><pre><code>  解决：修改entry入口，将html文件引入</code></pre></li></ol><blockquote><p>浏览器不自动刷新解决办法：<a href="https://blog.csdn.net/weixin_42281924/article/details/109541293">https://blog.csdn.net/weixin_42281924/article/details/109541293</a></p></blockquote><p><strong>修改配置文件</strong></p><pre><code>module.exports = { target: "web"  mode: 'development',  devServer: {    contentBase: resolve(__dirname, 'build'),    compress: true,    port: 3000,    open: true,    //开启HMR功能    //当修改了webpack配置，新配置要想生效，必须重新webpack服务    hot: true  }};</code></pre><h3 id="5-2-source-map"><a href="#5-2-source-map" class="headerlink" title="5. 2 source-map"></a>5. 2 source-map</h3><ol><li><p>source-map: 一种提供源代码到构建后代码映射技术 (如果构建后代码出错了，通过映射可以追踪源代码错误)</p><p>​        <code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code></p></li></ol><blockquote><p>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快</p></blockquote><ol start="2"><li><p>分类</p><ol><li>source-map：外部，错误代码准确信息 和 源代码的错误位置</li><li>inline-source-map：内联，只生成一个内联source-map，有错误代码准确信息 和 源代码的错误位置</li><li>hidden-source-map：外部，不能追踪源代码错误，只能提示到构建后代码的错误位置</li><li>eval-source-map：内联，每一个文件都生成对应的source-map，放在eval函数里，有错误代码准确信息 和 源代码的错误位置(多一个hash值)</li><li>nosources-source-map：外部，有错误代码准确信息和源码位置, 但是不能查看源码</li><li>cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置 (精确到行，其他的能精确到语句)</li><li>cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module会加入loader的sourcemap</li></ol></li><li><p>应用</p><ul><li><p>开发环境：</p><ul><li><p>速度快(eval &gt; inline &gt; cheap &gt; …)，调试更友好：eval-cheap-souce-map &gt; eval-source-map</p></li><li><p>调试更友好 ：souce-map &gt; cheap-module-souce-map &gt; cheap-souce-map</p><p> –&gt;结论：eval-source-map / eval-cheap-module-souce-map</p></li></ul></li><li><p>生产环境：源代码为了安全要不要隐藏? 调试要不要更友好</p><ul><li><p>nosources-source-map 全部隐藏</p></li><li><p>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</p><p> –&gt;结论：source-map / cheap-module-souce-map</p></li></ul><blockquote><p>内联会让代码体积变大，所以在生产环境不用内联的sourcemap</p></blockquote></li></ul></li></ol><pre><code>module.exports = {  devtool: 'eval-source-map'};</code></pre><h3 id="5-3-oneOf"><a href="#5-3-oneOf" class="headerlink" title="5. 3 oneOf"></a>5. 3 oneOf</h3><pre><code>module.exports = {  module: {    rules: [      {        //在package.json中eslintConfig--&gt;airbnb        test: /\.js$/,        exclude: /node_modules/,        //优先执行        enforce: 'pre',        loader: 'eslint-loader',        options: {          fix: true        }      },      {        //以下loader只会匹配一个        //注意：不能有两个配置处理同一种类型文件        oneOf: [          {            test: /\.css$/,            use: [...commonCssLoader]          },          {            test: /\.less$/,            use: [...commonCssLoader, 'less-loader']          },          /*          正常来讲，一个文件只能被一个loader处理。          当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：          先执行eslint在执行babel          */          {            test: /\.js$/,            exclude: /node_modules/,            loader: 'babel-loader',            options: {              presets: [                [                  '@babel/preset-env',                  {                    useBuiltIns: 'usage',                    corejs: { version: 3 },                    targets: {                      chrome: ' 60 ',                      firefox: ' 50 '                    }                  }                ]              ]            }          },          {            test: /\.(jpg|png|gif)/,            loader: 'url-loader',            options: {              limit: 8 * 1024,              name: '[hash: 10 ].[ext]',              outputPath: 'imgs',              esModule: false            }          },          {            test: /\.html$/,            loader: 'html-loader'          },          {            exclude: /\.(js|css|less|html|jpg|png|gif)/,            loader: 'file-loader',            options: {              outputPath: 'media'            }          }        ]      }    ]  },};</code></pre><h3 id="5-4-缓存"><a href="#5-4-缓存" class="headerlink" title="5. 4 缓存"></a>5. 4 缓存</h3><ol><li><p>babel缓存   –&gt; 让第二次打包构建速度更快</p><pre><code>cacheDirectory: true</code></pre></li><li><p>文件资源缓存   –&gt; 让代码上线运行缓存更好使用</p><ul><li><p><code>hash</code>: 每次wepack构建时会生成一个唯一的hash值。</p><blockquote><p>问题: 因为js和css同时使用一个hash值。</p><p>如果重新打包，会导致所有缓存失效。（可能我却只改动一个文件）</p></blockquote></li><li><p><code>chunkhash</code>：根据chunk生成的hash值。如果打包来源于同一个chunk，那么hash值就一样</p><blockquote><p>​    问题: js和css的hash值还是一样的</p><p>​     因为css是在入口js中被引入的，所以同属于一个chunk</p></blockquote></li><li><p><code>contenthash</code>: 根据文件的内容生成hash值。不同文件hash值一定不一样   </p></li></ul></li></ol><pre><code>module.exports = {  module: {    rules: [{{            test: /\.js$/,            exclude: /node_modules/,            loader: 'babel-loader',            options: {              presets: [                [                  '@babel/preset-env',                  {                    useBuiltIns: 'usage',                    corejs: { version: 3 },                    targets: {                      chrome: ' 60 ',                      firefox: ' 50 '                    }}]],              //开启babel缓存              //第二次构建时，会读取之前的缓存              cacheDirectory: true            }          },          {            test: /\.(jpg|png|gif)/,            loader: 'url-loader',            options: {              limit: 8 * 1024,              name: '[hash: 10 ].[ext]',              outputPath: 'imgs',              esModule: false            }}]},  plugins: [    new MiniCssExtractPlugin({          filename: 'css/built.[contenthash: 10 ].css'        // 使用contenthash    }),  ],};</code></pre><h3 id="5-5-treeshaking"><a href="#5-5-treeshaking" class="headerlink" title="5. 5 treeshaking"></a>5. 5 treeshaking</h3><p> 作用：去除无用代码，减少代码体积</p><p> 前提：</p><ol><li>必须使用ES6模块化</li><li>开启production环境</li></ol><p>问题：可能会把css / @babel/polyfill （副作用）文件干掉，这些文件只引用了</p><pre class=" language-json"><code class="language-json">//在package.json配置：<span class="token property">"sideEffects"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*.css"</span><span class="token punctuation">,</span> <span class="token string">"*.less"</span><span class="token punctuation">]</span>//<span class="token property">"sideEffects"</span><span class="token operator">:</span> <span class="token boolean">false</span> 所有代码都没有副作用（都可以进行tree shaking）</code></pre><h3 id="5-6-codesplit"><a href="#5-6-codesplit" class="headerlink" title="5. 6 codesplit"></a>5. 6 codesplit</h3><p>5.1 作用：</p><ol><li><p>可以将node_modules中代码单独打包一个chunk最终输出</p></li><li><p>自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk</p></li></ol><p>5.2  配置</p><ol><li><p>利用多入口文件、splitChunks分割</p><pre><code>module.exports = {  //单入口  //entry:'./src/js/index.js',  entry: {        index: './src/js/index.js',    test: './src/js/test.js'  },  output: {    //[name]：取文件名    filename: 'js/[name].[contenthash: 10 ].js',    path: resolve(__dirname, 'build')  },  /*  1 .可以将node_modules中代码单独打包一个chunk最终输出  2 .自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk  */  optimization: {    splitChunks: {      chunks: 'all'    }  },};</code></pre></li><li><p>利用import()</p><p>通过js代码，让某个文件被单独打包成一个chunk<br>import动态导入<code>import(/*webpackChunkName: 文件名*/ 引入路径)</code>：能将某个文件单独打包</p><pre><code>module.exports = {  //单入口  entry: './src/js/index.js',  output: {    //[name]：取文件名    filename: 'js/[name].[contenthash: 10 ].js',    path: resolve(__dirname, 'build')  },  optimization: {    splitChunks: {      chunks: 'all'    }  },};</code></pre></li></ol><h3 id="5-7-lazyloading和预加载"><a href="#5-7-lazyloading和预加载" class="headerlink" title="5. 7 lazyloading和预加载"></a>5. 7 lazyloading和预加载</h3><blockquote><p>利用<code>import(/*webpackChunkName: 文件名*/ 引入路径)</code>懒加载</p></blockquote><ul><li><p>正常加载：可以认为是并行加载（同一时间加载多个文件）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> xxx</code></pre></li><li><p>懒加载 lazyload：当文件需要使用时才加载</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">)</span></code></pre></li><li><p><a href="https://webpack.docschina.org/guides/code-splitting/#prefetchingpreloading-modules">预获取prefetch</a>：将来某些其他导航下可能需要的资源</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackPrefetch: true */</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="https://webpack.docschina.org/guides/code-splitting/#prefetchingpreloading-modules">预加载preload</a>：当前导航下可能需要资源</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackPreload: true */</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="5-8-pwa"><a href="#5-8-pwa" class="headerlink" title="5. 8 pwa"></a>5. 8 pwa</h3><blockquote><p>地址：<a href="https://webpack.docschina.org/guides/progressive-web-application/">https://webpack.docschina.org/guides/progressive-web-application/</a></p></blockquote><pre class=" language-js"><code class="language-js">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev workbox<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin</code></pre><p>3 .修改webpack.config.js配置文件</p><pre class=" language-js"><code class="language-js">constWorkboxWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'workbox-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*PWA:渐进式网络开发应用程序(离线可访问)workbox-->workbox-webpack-plugin*/</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token operator">...</span>    <span class="token keyword">new</span> <span class="token class-name">WorkboxWebpackPlugin<span class="token punctuation">.</span>GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*      1.帮助serviceworker快速启动      2.删除旧的serviceworker      3.生成一个serviceworker配置文件~      */</span>      clientsClaim<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      skipWaiting<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>​        入口js文件配置：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>   window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'/service-worker.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>registration <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'SW registered: '</span><span class="token punctuation">,</span> registration<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>registrationError <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'SW registration failed: '</span><span class="token punctuation">,</span> registrationError<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="5-9-多进程打包"><a href="#5-9-多进程打包" class="headerlink" title="5. 9 多进程打包"></a>5. 9 多进程打包</h3><blockquote><p>地址：<a href="https://webpack.docschina.org/loaders/thread-loader/">https://webpack.docschina.org/loaders/thread-loader/</a></p></blockquote><p>​            进程启动大概为 600 ms，进程通信也有开销。<strong>只有打包消耗时间比较长，才需要多进程打包，请仅在耗时的操作中使用此 loader！</strong></p><p>2 .下载安装包</p><pre><code>npm install --save-dev thread-loader</code></pre><p>3 .修改配置文件</p><pre><code>module.exports = {  module: {    rules: [{        {          test: /\.js$/,          exclude: /node_modules/,          use: [            {              loader: 'thread-loader',              options: {                workers: 2 //进程 2 个              }            },            {              loader: 'babel-loader',              options: {                presets: [                  [                    '@babel/preset-env',                    {                      useBuiltIns: 'usage',                      corejs: { version: 3 },                      targets: {                        chrome: ' 60 ',                        firefox: ' 50 '                      }                    }                  ]                ],                cacheDirectory: true              }            }]        }    }]  },};</code></pre><h3 id="5-10-externals"><a href="#5-10-externals" class="headerlink" title="5. 10  externals"></a>5. 10  externals</h3><blockquote><p>与<code>dll</code>对比：externals本地不存在，使用外链的(第三方)库</p></blockquote><pre><code>module.exports = {  externals: {    //拒绝jQuery被打包进来    jquery: 'jQuery',    ......  }};</code></pre><h3 id="5-11-dll-动态链接库"><a href="#5-11-dll-动态链接库" class="headerlink" title="5. 11 dll(动态链接库)"></a>5. 11 dll(动态链接库)</h3><blockquote><p>与<code>external</code>对比：dll本地能存在，且每次打包总会被重复打包的第三方库或者自己不会改变的库</p></blockquote><ol><li><p>创建webpack.dll.js(名称随意) </p></li><li><p>使用<a href="https://webpack.docschina.org/plugins/dll-plugin/#dllplugin">DllPlugin</a>插件配置dll打包库</p><pre><code>module.exports = {  entry: {    library: ['jquery'],  },  output: {    filename: '[name].js',    path: resolve(__dirname, 'dll'),    library: "[name]_[hash]"  },  plugins: [    new webpack.DllPlugin({      name: '[name]_[hash]',    //要用_,其他分隔符可能出错      path: resolve(__dirname, 'dll/manifest.json')    })  ],  mode: 'production'};</code></pre></li><li><p>dll打包：<code>npx webpack --config webpack.dll.js</code></p></li><li><p>再在webpack.config.js中用<a href="https://webpack.docschina.org/plugins/dll-plugin/#dllreferenceplugin">DllReferencePlugin</a> 配置动态链接的库,这样main.js就不会引入配置里指定的库了</p></li><li><p>构建：<code>npx webpack</code></p></li><li><p>再用<a href="https://juejin.cn/post/6844903777296728072">AddAssetHtmlWebpackPlugin</a>插件将dll的包引入到<code>index.html</code>中</p></li></ol><pre><code>module.exports = {  plugins: [    //告诉webpack哪些库不参与打包，同时使用时的名称也得变~    newwebpack.DllReferencePlugin({      manifest: resolve(__dirname, 'dll/manifest.json')    }),    //将某个文件打包输出去，并在html中自动引入该资源    new AddAssetHtmlWebpackPlugin({        filepath: resolve(__dirname, 'dll/library.js'),    })  ],};</code></pre><h2 id="第-6-章：-webpack-配置详情"><a href="#第-6-章：-webpack-配置详情" class="headerlink" title="第 6 章： webpack 配置详情"></a>第 6 章： webpack 配置详情</h2><h3 id="6-1-entry：入口起点"><a href="#6-1-entry：入口起点" class="headerlink" title="6. 1 entry：入口起点"></a>6. 1 entry：入口起点</h3><ol><li><p><code>string --&gt; './src/index.js'</code></p><p>   单入口，打包形成一个chunk，输出一个bundle文件</p><p>​    此时chunk的名称默认是 main</p></li><li><p><code>array --&gt; ['./src/index.js', './src/add.js']</code></p><p>   多入口，所有入口文件最终只会形成一个chunk, 输出只有<strong>一个bundle文件</strong></p><p>   作用：在HMR中引入<code>index.html</code>让html热更新生效</p></li><li><p>object</p><p>   多入口</p><p>   有几个入口文件就形成几个chunk，输出几个bundle文件</p><p>​    此时chunk的名称是 key</p></li><li><p><code>数组对象 --&gt; { index :  [ 'index.js' ,  'add.js' ]}</code></p></li></ol><pre><code>module.exports = {  entry: {    index: ['./src/index.js', './src/count.js'],    //数组对象特殊用法，形成一个chunk，输出一个bundle文件    add: './src/add.js'  },};</code></pre><h3 id="6-2-output"><a href="#6-2-output" class="headerlink" title="6. 2 output"></a>6. 2 output</h3><pre><code>module.exports = {  output: {    filename: 'js/[name].js',    //文件名称（指定名称+目录）    path: resolve(__dirname, 'build'),    //输出文件目录（将来所有资源输出的公共目录）    publicPath: '/',    //所有资源引入公共路径前缀--&gt;'imgs/a.jpg'--&gt;'/imgs/a.jpg'    chunkFilename: 'js/[name]_chunk.js',    //非入口chunk(比如import函数引入的chunk)的名称    library:'[name]',    //整个thunk向外暴露的变量名    libraryTarget:'window'    //变量名添加到哪个上环境上，1.window 2.global 3.commonjs暴露 4.amd ...  },};</code></pre><h3 id="6-3-module"><a href="#6-3-module" class="headerlink" title="6. 3 module"></a>6. 3 module</h3><pre><code>module.exports = {  module: {    rules: [      {        test: /\.css$/,        use: ['style-loader', 'css-loader']        //多个loader用use，单个用loader      },      {        test: /\.js$/,        exclude: /node_modules/,                //排除node_modules下的js文件        include: resolve(__dirname, 'src'),        //只检查src下的js文件        enforce: 'pre',                //优先执行        //enforce:'post',            //延后执行        loader: 'eslint-loader',    //单个loader用loader        options: {}      },      {        oneOf: []               //以下配置只会生效一个      }    ]  },};</code></pre><h3 id="6-4-resolve"><a href="#6-4-resolve" class="headerlink" title="6. 4 resolve"></a>6. 4 resolve</h3><pre><code>module.exports = {  //解析模块的规则  resolve: {    //配置解析模块路径别名:优点简写路径缺点路径没有提示    alias: {      $css: resolve(__dirname, 'src/css')    },    //配置省略文件路径的后缀名    extensions: ['.js', '.json', '.jsx', '.css'],    //告诉webpack解析第三方模块的确定位置    modules: [resolve(__dirname, '../../node_modules'), 'node_modules']  }};</code></pre><h3 id="6-5-devserver"><a href="#6-5-devserver" class="headerlink" title="6. 5 devserver"></a>6. 5 devserver</h3><pre><code>module.exports = {  devServer: {    //运行在更改的代码的目录    contentBase: resolve(__dirname, 'build'),    //监视contentBase目录下的所有文件，一旦文件变化就会reload    watchContentBase: true,    watchOptions: {      //忽略文件      ignored: /node_modules/    },    //启动gzip压缩    compress: true,    //端口号    port: 5000,    //域名    host: 'localhost',    //自动打开浏览器    open: true,    //开启HMR功能    hot: true,    //不要显示启动服务器日志信息    clientLogLevel: 'none',    //除了一些基本启动信息以外，其他内容都不要显示    quiet: true,    //如果出错了，不要全屏提示~    overlay: false,    //服务器代理--&gt;解决开发环境跨域问题    proxy: {      //一旦devServer( 5000 )服务器接受到/api/xxx的请求，就会把请求转发到另外一个服务器(3000)      '/api': {        target: 'http://localhost: 3000',        //发送请求时，请求路径重写：将/api/xxx--&gt;/xxx（去掉/api）        pathRewrite: {          '^/api': ''        }      }    }  }};</code></pre><h3 id="6-6-optimization"><a href="#6-6-optimization" class="headerlink" title="6. 6 optimization"></a>6. 6 optimization</h3><pre><code>module.exports = {  optimization: {    minimizer: [      // 配置生产环境的压缩方案：js和css      new TerserWebpackPlugin({        // 开启缓存        cache: true,        // 开启多进程打包        parallel: true,        // 启动source-map        sourceMap: true      })    ],    splitChunks: {      chunks: 'all'      // 默认值，可以不写~      /* minSize: 30 * 1024, // 分割的chunk最小为30kb      maxSiza: 0, // 最大没有限制      minChunks: 1, // 要提取的chunk最少被引用1次      maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量      maxInitialRequests: 3, // 入口js文件最大并行请求数量      automaticNameDelimiter: '~', // 名称连接符      name: true, // 可以使用命名规则      cacheGroups: {        // 分割chunk的组        // node_modules文件会被打包到 vendors 组的chunk中。--&gt; vendors~xxx.js        // 满足上面的公共规则，如：大小超过30kb，至少被引用一次。        vendors: {          test: /[\\/]node_modules[\\/]/,          // 优先级          priority: -10        },        default: {          // 要提取的chunk最少被引用2次          minChunks: 2,          // 优先级          priority: -20,          // 如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块          reuseExistingChunk: true        }       }*/    },    // 将当前模块的记录其他模块的hash单独打包为一个文件 runtime    // 解决：b记录a的contenthash值，修改a文件导致b文件的contenthash也变化    runtimeChunk: {      name: entrypoint =&gt; `runtime-${entrypoint.name}`    },  }};</code></pre><h2 id="第7章：webpack-V5"><a href="#第7章：webpack-V5" class="headerlink" title="第7章：webpack V5"></a>第7章：webpack V5</h2><p>此版本重点关注以下内容:</p><ul><li>通过持久缓存提高构建性能.</li><li>使用更好的算法和默认值来改善长期缓存.</li><li>通过更好的树摇和代码生成来改善捆绑包大小.</li><li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li><li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li></ul><h3 id="7-1-自动删除-Node-js-Polyfills"><a href="#7-1-自动删除-Node-js-Polyfills" class="headerlink" title="7.1 自动删除 Node.js Polyfills"></a>7.1 自动删除 Node.js Polyfills</h3><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p><p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p><p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p><p>迁移：</p><ul><li>尽可能尝试使用与前端兼容的模块。</li><li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li></ul><h3 id="7-2-Chunk-和模块-ID"><a href="#7-2-Chunk-和模块-ID" class="headerlink" title="7.2 Chunk 和模块 ID"></a>7.2 Chunk 和模块 ID</h3><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p><p><code>chunkIds: "deterministic", moduleIds: "deterministic"</code></p><h3 id="7-3-Chunk-ID"><a href="#7-3-Chunk-ID" class="headerlink" title="7.3 Chunk ID"></a>7.3 Chunk ID</h3><p>你可以不用使用 <code>import(/* webpackChunkName: "name" */ "module")</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p><p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p><h3 id="7-4-Tree-Shaking"><a href="#7-4-Tree-Shaking" class="headerlink" title="7.4 Tree Shaking"></a>7.4 Tree Shaking</h3><ol><li>webpack 现在能够处理对嵌套模块的 tree shaking</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// inner.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// module.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> inner <span class="token keyword">from</span> <span class="token string">'./inner'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> inner <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// user.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">'./module'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>inner<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​            在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p><ol start="2"><li>webpack 现在能够处理多个模块之间的关系</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> something <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./something'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">usingSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> something<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">usingSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        当设置了<code>"sideEffects": false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>"./something"</code></p><ol start="3"><li>webpack 现在能处理对 Commonjs 的 tree shaking</li></ol><h3 id="7-5-Output"><a href="#7-5-Output" class="headerlink" title="7.5 Output"></a>7.5 Output</h3><p>webpack 4 默认只能输出 ES5 代码</p><p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p><p>如：<code>output.ecmaVersion: 2015</code></p><h3 id="7-6-SplitChunk"><a href="#7-6-SplitChunk" class="headerlink" title="7.6 SplitChunk"></a>7.6 SplitChunk</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack4</span>minSize<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack5</span>minSize<span class="token punctuation">:</span> <span class="token punctuation">{</span>  javascript<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>  style<span class="token punctuation">:</span> <span class="token number">50000</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="7-7-Caching"><a href="#7-7-Caching" class="headerlink" title="7.7 Caching"></a>7.7 Caching</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 配置缓存</span>cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 磁盘存储</span>  type<span class="token punctuation">:</span> <span class="token string">"filesystem"</span><span class="token punctuation">,</span>  buildDependencies<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当配置修改时，缓存失效</span>    config<span class="token punctuation">:</span> <span class="token punctuation">[</span>__filename<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>缓存将存储到 <code>node_modules/.cache/webpack</code></p><h3 id="7-8-监视输出文件"><a href="#7-8-监视输出文件" class="headerlink" title="7.8 监视输出文件"></a>7.8 监视输出文件</h3><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p><p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p><h3 id="7-9-默认值"><a href="#7-9-默认值" class="headerlink" title="7.9 默认值"></a>7.9 默认值</h3><blockquote><p>只有<code>mode</code>必须写</p></blockquote><ul><li><code>entry: "./src/index.js</code></li><li><code>output.path: path.resolve(__dirname, "dist")</code></li><li><code>output.filename: "[name].js"</code></li></ul><h3 id="7-10-更多内容"><a href="#7-10-更多内容" class="headerlink" title="7.10 更多内容"></a>7.10 更多内容</h3><p><a href="https://github.com/webpack/changelog-v5">https://github.com/webpack/changelog-v5</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 学习笔记</title>
      <link href="/9-nginx-xue-xi-bi-ji.html"/>
      <url>/9-nginx-xue-xi-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h4 id="Nginx-学习笔记"><a href="#Nginx-学习笔记" class="headerlink" title="Nginx 学习笔记"></a><strong>Nginx 学习笔记</strong></h4><p>总结<br>1 、 Nginx 简介<br>（ 1 ） 什么是Nginx 和可以做什么事情<br>（ 2 ） 正向代理<br>（ 3 ） 反向代理<br>（ 4 ） 动静分离</p><p>2 、 在Linux中安装nginx</p><p>3 、 Nginx的常用命令和配置文件</p><p>4 、 Nginx配置实例 1 反向代理</p><p>5 、 Nginx配置实例 2 负载均衡</p><p>6 、 Nginx配置实例 3 动静分离</p><p>7 、 Nginx的高可用集群<br>（ 1 ） nginx配置主从模式<br>（ 2 ） nginx配置双主模式</p><h1 id="Nginx-的简介"><a href="#Nginx-的简介" class="headerlink" title="Nginx 的简介"></a>Nginx 的简介</h1><h5 id="1-、什么是nginx"><a href="#1-、什么是nginx" class="headerlink" title="1 、什么是nginx"></a>1 、什么是nginx</h5><p>Nginx是高性能的HTTP和反向代理的服务器，处理高并发能力是十分强大的，能经受高负<br>载的考验,有报告表明能支持高达 50,000个并发连接数。</p><h5 id="2-、正向代理"><a href="#2-、正向代理" class="headerlink" title="2 、正向代理"></a>2 、正向代理</h5><p>（ 1 ）需要在客户端配置代理服务器进行指定网站访问，隐藏了客户端的IP地址</p><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109110252280.png" alt="image-20210109110252280"></p><h5 id="3-、反向代理"><a href="#3-、反向代理" class="headerlink" title="3 、反向代理"></a>3 、反向代理</h5><p>服务器配置代理服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109110233040.png" alt="image-20210109110233040"></p><h5 id="4-、负载均衡"><a href="#4-、负载均衡" class="headerlink" title="4 、负载均衡"></a>4 、负载均衡</h5><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109111630765.png" alt="image-20210109111630765"></p><h5 id="5-、动静分离"><a href="#5-、动静分离" class="headerlink" title="5 、动静分离"></a>5 、动静分离</h5><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速<br>度。降低原来单个服务器的压力。</p><blockquote><p>不需要跟数据库交互获取的资源都是静态资源</p></blockquote><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109113424433.png" alt="image-20210109113424433"></p><h1 id="Nginx-的安装"><a href="#Nginx-的安装" class="headerlink" title="Nginx 的安装"></a>Nginx 的安装</h1><h5 id="1-、准备工作"><a href="#1-、准备工作" class="headerlink" title="1 、准备工作"></a>1 、准备工作</h5><p>（ 1 ）打开虚拟机，使用远程连接工具连接linux操作系统<br>（ 2 ）到nginx官网下载软件：<a href="http://nginx.org/">http://nginx.org/</a></p><h5 id="2-、开始进行nginx安装"><a href="#2-、开始进行nginx安装" class="headerlink" title="2 、开始进行nginx安装"></a>2 、开始进行nginx安装</h5><blockquote><p>本来可以用 apt-get 的一起装的，但是想熟悉一下wget</p></blockquote><p>（ 1 ）安装pcre依赖</p><ol><li><p>联网下载pcre压缩文件依赖</p><pre><code>wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</code></pre></li><li><p>解压压缩文件</p><pre><code>tar –zxvf pcre-8.37.tar.gz</code></pre></li><li><p>执行<code>./configure</code></p></li><li><p>回到pcre目录下执行<code>make</code>，最后执行<code>make install</code></p></li><li><p>查看版本：</p><pre><code>pcre-config --version</code></pre></li></ol><p>（ 2 ）安装openssl 、zlib 、 gcc 依赖</p><pre><code>yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</code></pre><p>（ 3 ）安装nginx</p><ol><li>使用命令解压</li><li>./configure</li><li>make &amp;&amp; make install</li></ol><p>进入目录 /usr/local/nginx/sbin/nginx 启动服务</p><blockquote><p>在windows系统中访问linux中nginx，默认不能访问的，因为防火墙问题<br>（ 1 ）关闭防火墙<br>（ 2 ）开放访问的端口号， 80 端口</p></blockquote><p>查看开放的端口号</p><pre><code>firewall-cmd --list-all</code></pre><p>设置开放的端口号</p><pre><code>firewall-cmd --add-service=http – permanentfirewall-cmd --add-port=80/tcp --permanent</code></pre><p>重启防火墙</p><pre><code>firewall-cmd **–** reload</code></pre><h1 id="Nginx-的常用的命令"><a href="#Nginx-的常用的命令" class="headerlink" title="Nginx 的常用的命令"></a>Nginx 的常用的命令</h1><p>进入nginx目录中<br>cd /usr/local/nginx/sbin</p><p>1 、查看nginx版本号</p><pre><code>./nginx -v或者nginx -v</code></pre><p>2 、启动nginx</p><pre><code>./nginxservice nginx start</code></pre><p>3 、停止nginx</p><pre><code>./nginx -s stop</code></pre><p>4 、重新加载nginx</p><pre><code>./nginx -s reload</code></pre><h1 id="Nginx-的配置文件"><a href="#Nginx-的配置文件" class="headerlink" title="Nginx 的配置文件"></a>Nginx 的配置文件</h1><h5 id="1-、nginx配置文件位置"><a href="#1-、nginx配置文件位置" class="headerlink" title="1 、nginx配置文件位置"></a>1 、nginx配置文件位置</h5><pre><code>cd /usr/local/nginx/conf/nginx.conf使用apt-get安装时，配置文件在 /etc/nginx 中</code></pre><h5 id="2-、配置文件中的内容"><a href="#2-、配置文件中的内容" class="headerlink" title="2 、配置文件中的内容"></a>2 、配置文件中的内容</h5><p>（ 1 ）全局块：配置服务器整体运行的配置指令</p><p>​            比如<code>worker_processes 1</code>：处理并发数的配置</p><p>（ 2 ）events块：影响 Nginx 服务器与用户的网络连接</p><p>​            比如<code>worker_connections 1024</code>： 支持的最大连接数为 1024</p><p>（ 3 ）http块<br>还包含两部分：<br>http全局块<br>server块</p><h1 id="Nginx-配置实例-反向代理实例-1"><a href="#Nginx-配置实例-反向代理实例-1" class="headerlink" title="Nginx 配置实例-反向代理实例 1"></a>Nginx 配置实例-反向代理实例 1</h1><h5 id="1-、实现效果"><a href="#1-、实现效果" class="headerlink" title="1 、实现效果"></a>1 、实现效果</h5><p>（ 1 ）打开浏览器，在浏览器地址栏输入地址 <strong><em><a href="http://www.123.com/">http://www.123.com</a></em></strong> ，跳转到liunx系统tomcat主页面中</p><h5 id="2-、准备工作"><a href="#2-、准备工作" class="headerlink" title="2 、准备工作"></a>2 、准备工作</h5><p>（ 1 ）在liunx系统安装tomcat，使用默认端口 8080</p><ul><li>tomcat安装文件放到liunx系统中，解压</li><li>进入tomcat的bin目录中，./startup.sh启动tomcat服务器</li></ul><h3 id="（-2-）对外开放访问的端口"><a href="#（-2-）对外开放访问的端口" class="headerlink" title="（ 2 ）对外开放访问的端口"></a>（ 2 ）对外开放访问的端口</h3><pre><code>firewall-cmd --add-port=80 80 /tcp --permanentfirewall-cmd **–** reload</code></pre><h3 id="查看已经开放的端口号"><a href="#查看已经开放的端口号" class="headerlink" title="查看已经开放的端口号"></a>查看已经开放的端口号</h3><pre><code>firewall-cmd --list-all</code></pre><p>（ 3 ）在windows系统中通过浏览器访问tomcat服务器</p><h5 id="3-、访问过程的分析"><a href="#3-、访问过程的分析" class="headerlink" title="3 、访问过程的分析"></a>3 、访问过程的分析</h5><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109115049027.png" alt="image-20210109115049027"></p><h5 id="4-、具体配置"><a href="#4-、具体配置" class="headerlink" title="4 、具体配置"></a>4 、具体配置</h5><p>第一步 在windows系统的host文件进行域名和ip对应关系的配置</p><p>（ 1 ）添加内容在host文件中</p><p>第二步 在nginx进行请求转发的配置（反向代理配置）</p><h5 id="5-、最终测试"><a href="#5-、最终测试" class="headerlink" title="5 、最终测试"></a>5 、最终测试</h5><h1 id="Nginx-配置实例-反向代理实例-2"><a href="#Nginx-配置实例-反向代理实例-2" class="headerlink" title="Nginx 配置实例-反向代理实例 2"></a>Nginx 配置实例-反向代理实例 2</h1><h5 id="1-、实现效果-1"><a href="#1-、实现效果-1" class="headerlink" title="1 、实现效果"></a>1 、实现效果</h5><p>使用nginx反向代理，根据访问的路径跳转到不同端口的服务中<br>nginx监听端口为 9001 ，</p><p>访问 <a href="http://192.168.17.129:9001/edu/">http://192.168.17.129:9001/edu/</a> 直接跳转到127.0.0.1:808 0<br>访问 <a href="http://">http://</a> 192.168.17.129:9001/vod/ 直接跳转到127.0.0.1:808 1</p><h5 id="2-、准备工作-1"><a href="#2-、准备工作-1" class="headerlink" title="2 、准备工作"></a>2 、准备工作</h5><p>（ 1 ）准备两个tomcat服务器，一个 8080 端口，一个 8081 端口<br>（ 2 ）创建文件夹和测试页面</p><h5 id="3-、具体配置"><a href="#3-、具体配置" class="headerlink" title="3 、具体配置"></a>3 、具体配置</h5><p>（ 1 ）找到nginx配置文件，进行反向代理配置</p><p>（ 2 ）开放对外访问的端口号 9001 8080 8081</p><h5 id="4-、最终测试"><a href="#4-、最终测试" class="headerlink" title="4 、最终测试"></a>4 、最终测试</h5><h1 id="Nginx-配置实例-负载均衡"><a href="#Nginx-配置实例-负载均衡" class="headerlink" title="Nginx 配置实例-负载均衡"></a>Nginx 配置实例-负载均衡</h1><h5 id="1-、实现效果-2"><a href="#1-、实现效果-2" class="headerlink" title="1 、实现效果"></a>1 、实现效果</h5><p>（ 1 ）浏览器地址栏输入地址 <a href="http://192.168.17.129/edu/a.html%EF%BC%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%95%88%E6%9E%9C%EF%BC%8C%E5%B9%B3%E5%9D%87">http://192.168.17.129/edu/a.html，负载均衡效果，平均</a> 8080<br>和 8081 端口中</p><h5 id="2-、准备工作-2"><a href="#2-、准备工作-2" class="headerlink" title="2 、准备工作"></a>2 、准备工作</h5><p>（ 1 ）准备两台tomcat服务器，一台 8080 ，一台 8081<br>（ 2 ）在两台tomcat里面webapps目录中，创建名称是edu文件夹，在edu文件夹中创建<br>页面a.html，用于测试</p><h5 id="3-、在nginx的配置文件中进行负载均衡的配置"><a href="#3-、在nginx的配置文件中进行负载均衡的配置" class="headerlink" title="3 、在nginx的配置文件中进行负载均衡的配置"></a>3 、在nginx的配置文件中进行负载均衡的配置</h5><h5 id="4-、nginx分配服务器策略"><a href="#4-、nginx分配服务器策略" class="headerlink" title="4 、nginx分配服务器策略"></a>4 、nginx分配服务器策略</h5><p>第一种 轮询（默认）<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p>第二种weight<br>weight代表权重默认为1,权重越高被分配的客户端越多</p><p>第三种ip_hash<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器</p><p>第四种fair（第三方）<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><h1 id="Nginx-配置实例-动静分离"><a href="#Nginx-配置实例-动静分离" class="headerlink" title="Nginx 配置实例-动静分离"></a>Nginx 配置实例-动静分离</h1><h5 id="1-、什么是动静分离"><a href="#1-、什么是动静分离" class="headerlink" title="1 、什么是动静分离"></a>1 、什么是动静分离</h5><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109115255261.png" alt="image-20210109115255261"></p><p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏<br>览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源<br>设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，<br>所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，<br>不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一<br>个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304 ，<br>如果有修改，则直接从服务器重新下载，返回状态码 200 。</p><h5 id="2-、准备工作-3"><a href="#2-、准备工作-3" class="headerlink" title="2 、准备工作"></a>2 、准备工作</h5><p>（ 1 ）在liunx系统中准备静态资源，用于进行访问</p><h5 id="3-、具体配置-1"><a href="#3-、具体配置-1" class="headerlink" title="3 、具体配置"></a>3 、具体配置</h5><p>（ 1 ）在nginx配置文件中进行配置</p><h5 id="4-、最终测试-1"><a href="#4-、最终测试-1" class="headerlink" title="4 、最终测试"></a>4 、最终测试</h5><p>（ 1 ）浏览器中输入地址：<a href="http://192.168.17.129/image/01.jpg">http://192.168.17.129/image/01.jpg</a></p><ul><li>因为配置文件 autoindex on</li></ul><p>（ 2 ）在浏览器地址栏输入地址：<a href="http://192.168.17.129/www/a.html">http://192.168.17.129/www/a.html</a></p><h1 id="Nginx-配置高可用的集群"><a href="#Nginx-配置高可用的集群" class="headerlink" title="Nginx 配置高可用的集群"></a>Nginx 配置高可用的集群</h1><h5 id="1-、什么是nginx高可用"><a href="#1-、什么是nginx高可用" class="headerlink" title="1 、什么是nginx高可用"></a>1 、什么是nginx高可用</h5><p><img src="/archives/9-nginx-xue-xi-bi-ji.htm/Users\10615\AppData\Roaming\Typora\typora-user-images\image-20210109115401695.png" alt="image-20210109115401695"></p><p>（ 1 ）需要两台nginx服务器<br>（ 2 ）需要keepalived<br>（ 3 ）需要虚拟ip</p><h5 id="2-、配置高可用的准备工作"><a href="#2-、配置高可用的准备工作" class="headerlink" title="2 、配置高可用的准备工作"></a>2 、配置高可用的准备工作</h5><h3 id="（-1-）需要两台服务器-192-168-17-129-和-192-168-17"><a href="#（-1-）需要两台服务器-192-168-17-129-和-192-168-17" class="headerlink" title="（ 1 ）需要两台服务器 192.168.17.129 和 192.168.17."></a>（ 1 ）需要两台服务器 192.168.17.129 和 192.168.17.</h3><p>（ 2 ）在两台服务器安装nginx<br>（ 3 ）在两台服务器安装keepalived</p><h5 id="3-、在两台服务器安装keepalived"><a href="#3-、在两台服务器安装keepalived" class="headerlink" title="3 、在两台服务器安装keepalived"></a>3 、在两台服务器安装keepalived</h5><p>（ 1 ）使用yum命令进行安装<br>yum install keepalived <strong>–</strong> y</p><p>（ 2 ）安装之后，在etc里面生成目录keepalived，有文件keepalived.conf</p><h5 id="4-、完成高可用配置（主从配置）"><a href="#4-、完成高可用配置（主从配置）" class="headerlink" title="4 、完成高可用配置（主从配置）"></a>4 、完成高可用配置（主从配置）</h5><p>（ 1 ）修改/etc/keepalived/keepalivec.conf配置文件</p><pre><code>global_defs {notification_email {acassen@firewall.locfailover@firewall.locsysadmin@firewall.loc}notification_email_from Alexandre.Cassen@firewall.locsmtp_server 192.168.17.smtp_connect_timeout 30router_id LVS_DEVEL}vrrp_script chk_http_port {script "/usr/local/src/nginx_check.sh"interval 2 #（检测脚本执行的间隔）weight 2}vrrp_instance VI_1 {state BACKUP # 备份服务器上将 MASTER 改为 BACKUPinterface ens33 //网卡virtual_router_id 51 # 主、备机的virtual_router_id必须相同priority 90 # 主、备机取不同的优先级，主机值较大，备份机值较小advert_int 1authentication {auth_type PASSauth_pass 1111}virtual_ipaddress {192.168.17.50 // VRRP H虚拟地址}}</code></pre><p>（ 2 ）在/usr/local/src添加检测脚本</p><pre><code>#!/bin/bashA=`ps -C nginx –no-header |wc -l`if [ $A -eq 0 ];then /usr/local/nginx/sbin/nginx sleep 2 if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then killall keepalived fifi</code></pre><p>（ 3 ）把两台服务器上nginx和keepalived启动<br>启动nginx：./nginx<br>启动keepalived：systemctl start keepalived.service</p><h5 id="5-、最终测试-1"><a href="#5-、最终测试-1" class="headerlink" title="5 、最终测试"></a>5 、最终测试</h5><p>（ 1 ）在浏览器地址栏输入 虚拟ip地址 192.168.17.</p><p>（ 2 ）把主服务器（192.168.17.129）nginx和keepalived停止，再输入192.168.17.</p><h2 id="Nginx的原理"><a href="#Nginx的原理" class="headerlink" title="Nginx的原理"></a>Nginx的原理</h2><p>1 、mater和worker</p><p>2 、worker如何进行工作的</p><p>3 、一个master和多个woker有好处<br>（ 1 ）可以使用nginx <strong>–</strong> s reload 热部署，利用nginx进行热部署操作<br>（ 2 ）每个woker是独立的进程，如果有其中的一个woker出现问题，其他woker独立的，<br>继续进行争抢，实现请求过程，不会造成服务中断</p><p>4 、设置多少个woker合适</p><p>worker数和服务器的cpu数相等是最为适宜的</p><p>5 、连接数worker_connection<br>第一个：发送请求，占用了woker的几个连接数？<br>答案： 2 或者 4 个</p><p>第二个：nginx有一个master，有四个woker，每个woker支持最大的连接数 1024 ，支持的<br>最大并发数是多少？</p><ul><li>普通的静态访问最大并发数是： worker_connections * worker_processes /2</li><li>而如果是HTTP作 为反向代理来说，最大并发数量应该是worker_connections *<br>worker_processes/4。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jest笔记</title>
      <link href="/8-jest-xue-xi-bi-ji.html"/>
      <url>/8-jest-xue-xi-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、jest介绍"><a href="#1、jest介绍" class="headerlink" title="1、jest介绍"></a>1、jest介绍</h1><p>主流前端测试框架：Jasmine，MOCHA，jest</p><h4 id="jest优点："><a href="#jest优点：" class="headerlink" title="jest优点："></a>jest优点：</h4><ul><li>新技术</li><li>性能好、功能多、简单易用</li><li>能差异化测试，只测试变化的模块</li><li>快出覆盖率</li><li>多项目并行</li></ul><h4 id="单元测试和集成测试的区别"><a href="#单元测试和集成测试的区别" class="headerlink" title="单元测试和集成测试的区别"></a>单元测试和集成测试的区别</h4><ul><li><strong>单元测试unit testing</strong>：指对软件中的最小可测试单元进行检查和验证。<strong>前端所说的单元测试就是对一个模块进行测试</strong></li><li><strong>集成测试</strong>：也叫组装测试或者联合测试。在单元测试的基础上，将所有模块按照涉及要求组装成为子系统或系统，进行集成测试。</li></ul><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><ol><li><code>npm i jest</code></li><li>修改package.json 的<code>script</code>的<code>test</code>为<code>jest</code>, 或者<code>jest --watchAll</code>(自动监测变化并测试，但有时测试结果是错误的:&lt;)</li><li><code>npm test</code></li></ol><h1 id="2、jest配置"><a href="#2、jest配置" class="headerlink" title="2、jest配置"></a>2、jest配置</h1><blockquote><p>只对<code>&lt;name&gt;.test.js</code>的文件进行测试</p></blockquote><h4 id="生成配置文件jest-config-js："><a href="#生成配置文件jest-config-js：" class="headerlink" title="生成配置文件jest.config.js："></a>生成配置文件jest.config.js：</h4><pre><code>npx jest --init</code></pre><h4 id="生成覆盖率报告："><a href="#生成覆盖率报告：" class="headerlink" title="生成覆盖率报告："></a>生成覆盖率报告：</h4><pre><code>npx jest --coverage</code></pre><blockquote><p>覆盖率报告文件夹的名字可通过 jest.config.js的<code>coverageDirectroy</code>指定</p></blockquote><h4 id="使jest支持es6的import语法：利用babel将es6转为commonjs语法"><a href="#使jest支持es6的import语法：利用babel将es6转为commonjs语法" class="headerlink" title="使jest支持es6的import语法：利用babel将es6转为commonjs语法"></a>使jest支持es6的import语法：利用babel将es6转为commonjs语法</h4><p>​    配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>      <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h1 id="3、匹配器"><a href="#3、匹配器" class="headerlink" title="3、匹配器"></a>3、匹配器</h1><p>官网匹配器地址：<a href="https://jestjs.io/docs/en/expect">https://jestjs.io/docs/en/expect</a></p><ol><li><p>toBe(): 相当于 <code>===</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBe'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 就是 ===</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>toEqual()： 外形是否一样</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toEqual'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 外形</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>toBeNull()：是null</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toBeNull', () => {  let a = null  expect(a).toBeNull()})</code></pre></li><li><p>toBeUndefined / toBeDefined：是否定义</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toBeUndefined', () => {  let a   expect(a).toBeUndefined()})</code></pre></li><li><p>toBeTruthy / toBeFalsy：转换为布尔值后为true还是false</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeTruthy'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>toBeGreaterThan / toBeLessThan / toBeGreaterThanOrEqual / toBeLessThanOrEqual：数值比较</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toBeGreaterThan', () => {   // 大于  let a = 10  expect(a).toBeGreaterThan(4)})</code></pre></li><li><p>toBeCloseTo ：解决浮点数计算不精确的问题</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toBeCloseTo', () => {       // 解决浮点数计算不精确的问题  expect(0.1 + 0.2).toBeCloseTo(0.3)})</code></pre></li><li><p>toMatch：字符串内是否包含</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toMatch', () => {         // 字符串内是否包含  const arr = 'li, liu, wang'  expect(arr).toMatch('wang')})</code></pre></li><li><p>toContain：数组、set内是否包含</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toContain', () => {       // 数组、set内是否包含  const arr=['谢大脚','刘英','小红']  const data = new Set(arr)  expect(data).toContain('谢大脚')})</code></pre></li><li><p>toThrow：程序内是否抛出异常</p><pre class=" language-JavaScript"><code class="language-JavaScript">test('toThrow', () => {       // 程序内是否抛出异常  function throwError() {    // throw new Error('this is an error')  }  expect(throwError).not.toThrow('this is an error')    //使用 .not取反  // expect(outError).toThrow('this is an error')})</code></pre></li></ol><h1 id="4、异步代码测试"><a href="#4、异步代码测试" class="headerlink" title="4、异步代码测试"></a>4、异步代码测试</h1><blockquote><p>未明白原理，需要补充！！！！！！</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'异步代码测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用`done`表征异步完成</span>  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用async/await实现：</p><pre><code></code></pre><h1 id="5、钩子函数"><a href="#5、钩子函数" class="headerlink" title="5、钩子函数"></a>5、钩子函数</h1><blockquote><p>钩子函数只作用于当前的文件</p></blockquote><ul><li><p>beforeAll(callback)：在所有测试用例之前进行执行</p></li><li><p>afterAll(callback)：完成所有测试用例之后才执行的函数</p></li><li><p>beforeEach(callback)：每个测试用例前都会执行一次的钩子函数</p></li><li><p>afterEach(callback)：每次测试用例完成测试之后执行一次的钩子函数</p><pre class=" language-JavaScript"><code class="language-JavaScript">// 举例afterEach(()=>{        console.log('afterEach')})</code></pre></li></ul><h1 id="6、测试作用域"><a href="#6、测试作用域" class="headerlink" title="6、测试作用域"></a>6、测试作用域</h1><p><code>describe(测试用例)</code>：创建作用域</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel学习笔记</title>
      <link href="/7-babel-xue-xi-bi-ji.html"/>
      <url>/7-babel-xue-xi-bi-ji.html</url>
      
        <content type="html"><![CDATA[<p>学习地址：<a href="https://www.jiangruitao.com/babel/">姜瑞涛的官方网站</a></p><blockquote><p>babel是一个工具集，主要用于将ES6的js代码转为ES5等向后兼容的js代码</p></blockquote><h2 id="一、必要部分："><a href="#一、必要部分：" class="headerlink" title="一、必要部分："></a>一、必要部分：</h2><ol><li>babel配置文件：babelrc、babel.js、babel.config.js或package.json</li><li>相关的npm依赖</li><li>需要转码的js文件</li></ol><h2 id="二、作用："><a href="#二、作用：" class="headerlink" title="二、作用："></a>二、作用：</h2><ol><li>语法转换</li><li>补齐api     =&gt; polyfill (babel默认只转换JavaScript语法，不转换api)</li></ol><h2 id="三、版本"><a href="#三、版本" class="headerlink" title="三、版本"></a>三、版本</h2><blockquote><p>Babel是一个工具集，而这个工具集是围绕@babel/core这个核心npm包构成的。每次@babel/core发布新版本的时候，整个工具集的其它npm包也都会跟着升级到与@babel/core相同的版本号，即使它们的代码可能一行都没有改变</p></blockquote><ul><li><p>v7：<code>@babel/core</code></p></li><li><p>v6：<code>babel-core</code></p></li></ul><h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><blockquote><p>建议使用babel.config.js文件，可以进行逻辑处理</p></blockquote><ol><li><p>预设数组<code>presets</code>：就是一组Babel插件的集合</p><ol><li><strong>@babel/preset-env</strong>：TC39每年发布的进入标准的ES语法的转换器预设集合</li><li>@babel/preset-flow</li><li>@babel/preset-react</li><li>@babel/preset-typescript</li></ol></li><li><p>插件数组<code>plugins</code>：@babel/plugin-transform-runtime常用</p></li><li><p>其他<code>minified</code>、<code>ignore</code>等</p><blockquote><p><strong>plugin与preset的短名称：</strong></p><p>​    如果插件的npm包名称的前缀为 babel-plugin-，可以省略前缀。</p><p>​    如果npm包名称的前缀带有npm作用域@，例如@org/babel-plugin-xxx,短名称可以写成@org/xxx，但babel官方并没有给出明确的说明，所以还是推荐用全称。</p></blockquote></li></ol><p><strong>执行顺序：</strong></p><ul><li>插件比预设先执行</li><li>插件执行顺序是插件数组从前向后执行</li><li>预设执行顺序是预设数组从后向前执行</li></ul><h2 id="五、常用包及配置："><a href="#五、常用包及配置：" class="headerlink" title="五、常用包及配置："></a>五、常用包及配置：</h2><blockquote><p>默认为 v7</p></blockquote><ol><li>@babel/cli：Babel命令行转码工具，如果我们<strong>使用命令行</strong>进行Babel转码就需要安装它。</li></ol><ol start="2"><li>@babel/core：Babel的核心npm包。</li></ol><ol start="3"><li><p><strong>@babel/preset-env</strong>(常用)：提供了ES6转换ES5的语法转换规则</p><p>配置：</p><pre class=" language-json"><code class="language-json">presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"@babel/env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    targets<span class="token operator">:</span> <span class="token punctuation">{</span>        //转码的最低环境        <span class="token property">"chrome"</span><span class="token operator">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>        <span class="token property">"ie"</span><span class="token operator">:</span> <span class="token string">"11"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    useBuiltIns<span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span>    //见下    corejs<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    //取值为<span class="token number">2</span>或<span class="token number">3</span>，指定core-js的使用版本    modules<span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">,</span>     //见下<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><ul><li><p><code>useBuiltIns</code>：</p><p>取值：    </p><ul><li><code>usage</code>：自动引入需要用到的polyfill</li><li><code>entry</code>：需要自行引入polyfill，且不会根据我们实际用到的API进行针对性引入polyfill</li><li><code>false</code></li></ul><blockquote><p>使用<code>entry</code>这种方式的时候，只能<code>import polyfill</code>一次，一般都是在入口文件。如果进行多次import，会发生错误。</p></blockquote></li><li><p><code>modules</code>：取值可以是<code>amd</code>、<code>umd</code> 、 <code>systemjs</code> 、 <code>commonjs</code> 、<code>cjs</code> 、<code>auto</code> 、<code>false</code>使用的模块语法</p><blockquote><p>在该参数项值是<code>auto</code>或不设置的时候，会发现我们转码前的代码里import都被转码成require了。</p><p>如果我们将参数项改成<code>false</code>，那么就不会对ES6模块化进行更改，还是使用import引入模块。</p></blockquote></li></ul></li></ol><ol start="4"><li><p><strong>@babel/polyfill</strong>： 垫片，从babel7.4开始，官方不推荐再使用了，因为@babel/polyfill本身其实就是两个npm包的集合：<strong>core-js与regenerator-runtime</strong>。</p><p>官方推荐直接使用这两个npm包。虽然@babel/polyfill还在进行版本升级，但其使用的core-js包为2.x.x版本，而core-js这个包本身已经发布到了3.x.x版本了，@babel/polyfill以后也不会使用3.x.x版本的包了。新版本的core-js实现了许多新的功能，例如数组的includes方法。</p><p>​        <strong>转码环境判断</strong>：如果我们的@babel/preset-env不设置任何参数，Babel就会完全根据package.json的<code>browserslist</code>的配置来做语法转换。如果没有browserslist，那么Babel就会把所有ES6的语法转换成ES5版本。</p><blockquote><p>注意：Babel使用browserslist的配置功能依赖于@babel/preset-env，如果Babel没有配置任何预设或插件，那么Babel对转换的代码会不做任何处理</p></blockquote></li></ol><ol start="5"><li><p><strong>@babel/runtime、<del>runtime-corejs2、</del>runtime-corejs3</strong>：原始的preset-env会在所有文件中重复注入辅助函数实现语法转换，将所有辅助函数移入runtime文件中再import入对应文件就不会增大项目体积了</p><p><a href="https://www.jiangruitao.com/babel/transform-runtime/">示例查看</a></p></li></ol><ol start="6"><li><p><strong>@babel/plugin-transform-runtime</strong>: @babel-runtime不能实现自动引入对应的辅助函数，借助此插件实现</p><pre class=" language-json"><code class="language-json">// 配置的默认值<span class="token punctuation">{</span>     <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>        <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"helpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 是否引入辅助包            <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    //为<span class="token boolean">false</span>、<span class="token number">2</span>、<span class="token number">3</span>，一般开发JS库的时候才设置为<span class="token number">2</span>或<span class="token number">3</span>              <span class="token property">"regenerator"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    //转换async，await              <span class="token property">"useESModules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>//是否使用es6的模块语法              <span class="token property">"absoluteRuntime"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    //用来自定义@babel/plugin-transform-runtime引入@babel/runtime/模块的路径规则              <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.0.0-beta.0"</span>    //该项主要是和@babel/runtime及其进化版@babel/runtime-corejs2、@babel/runtime-corejs3的版本号有关，这三个包我们只需要根据需要安装一个。我们把安装的npm包的版本号设置给version即可。例如，在上节的babel14例子里，安装的@babel/runtime-corejs3版本是^<span class="token number">7.10</span>.<span class="token number">4</span>，那么配置项version也取’^<span class="token number">7.10</span>.<span class="token number">4</span>’。//其实该项不填取默认值就行，目前填写版本号主要是可以减少打包体积。            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>​    作用：</p><ul><li>自动移除语法转换后内联的辅助函数，通过引入@babel/runtime/helpers里的辅助函数来替代；</li><li>当代码里使用了core-js的API，自动引入@babel/runtime-corejs3/core-js-stable/，以此来替代全局引入的core-js/stable</li><li>当代码里使用了Generator/async函数，自动引入@babel/runtime/regenerator以此来替代全局引入的regenerator-runtime/runtime；</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> babel </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在create-react-app创建的项目中对antd的样式按需引入</title>
      <link href="/6-zai-create-react-app-chuang-jian-de-xiang-mu-zhong-dui-antd-de-yang-shi-an-xu-yin-ru.html"/>
      <url>/6-zai-create-react-app-chuang-jian-de-xiang-mu-zhong-dui-antd-de-yang-shi-an-xu-yin-ru.html</url>
      
        <content type="html"><![CDATA[<h1 id="在create-react-app创建的项目中对antd的样式按需引入"><a href="#在create-react-app创建的项目中对antd的样式按需引入" class="headerlink" title="在create-react-app创建的项目中对antd的样式按需引入"></a>在create-react-app创建的项目中对antd的样式按需引入</h1><ol><li><p>下载 customize-cra,  react-app-rewired,  babel-plugin-import</p><blockquote><p><code>yarn add customize-cra react-app-rewired babel-plugin-import --dev</code></p></blockquote><p>​            customize-cra文档：<a href="https://github.com/arackaf/customize-cra">https://github.com/arackaf/customize-cra</a></p><p>​            react-app-rewired文档：<a href="https://github.com/timarney/react-app-rewired">https://github.com/timarney/react-app-rewired</a></p><p>​            babel-plugin-import文档：<a href="https://github.com/ant-design/babel-plugin-import">https://github.com/ant-design/babel-plugin-import</a></p></li></ol><ol start="2"><li><p>在package.json的同级创建config-overrides.js文件</p></li><li><p>config-overrides.js文件配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> override<span class="token punctuation">,</span> fixBabelImports <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'customize-cra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>    <span class="token function">fixBabelImports</span><span class="token punctuation">(</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>           libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span>        libraryDirectory<span class="token punctuation">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span>        style<span class="token punctuation">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//如果是less文件则改为true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fixBabelImports配置：<a href="https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options">https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options</a></p></li></ol><p>   import部分配置找babel-plugin-import：<a href="https://github.com/ant-design/babel-plugin-import#usage">https://github.com/ant-design/babel-plugin-import#usage</a></p><ol start="4"><li><p>修改package.json的<code>script</code>选项</p><p>​    安装react-app-rewired后的：<a href="https://github.com/timarney/react-app-rewired#3-flip-the-existing-calls-to-react-scripts-in-npm-scripts-for-start-build-and-test">https://github.com/timarney/react-app-rewired#3-flip-the-existing-calls-to-react-scripts-in-npm-scripts-for-start-build-and-test</a></p><pre><code>  /* package.json */  "scripts": {-   "start": "react-scripts start",+   "start": "react-app-rewired start",-   "build": "react-scripts build",+   "build": "react-app-rewired build",-   "test": "react-scripts test",+   "test": "react-app-rewired test",    "eject": "react-scripts eject"}</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js设计模式</title>
      <link href="/5-js-she-ji-mo-shi.html"/>
      <url>/5-js-she-ji-mo-shi.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、设计模式"><a href="#一、设计模式" class="headerlink" title="一、设计模式"></a>一、设计模式</h2><blockquote><p><font color="brown"><strong>重中之重！！！：找出变化的地方，使变化的地方与不变的地方分离</strong></font></p></blockquote><h3 id="1-单例模式-singleton"><a href="#1-单例模式-singleton" class="headerlink" title="1. 单例模式 singleton"></a><strong>1. 单例模式 singleton</strong></h3><ol><li><p>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></li><li><p>实现：用变量标志当前的是否已经为该类创造过实例对象，如果创造过则直接返回该实例，否则创造一个实例返回</p><pre class=" language-JavaScript"><code class="language-JavaScript">    let getSingle = (function() {        let instance;        return function (fn, ...rest) {     //fn: 用于创建单例的类            return instance || instance = fn.apply(this, rest);        }    })()</code></pre></li><li><p>惰性单例：在需要时才创建实例对象</p></li></ol><h3 id="2-代理模式"><a href="#2-代理模式" class="headerlink" title="2.代理模式"></a><strong>2.代理模式</strong></h3><blockquote><p>当客户不方便直接访问一个对象，或者不满足需要的时候，提供一个替身对象让客户访问，替身对请求进行一些处理后再把请求转交给本体对象</p></blockquote><img src="/archives/5-js-she-ji-mo-shi.htm/images\5.代理模式.png" alt="5.代理模式" style="zoom: 25%;width:50px"><p><strong>注意</strong>：<strong>代理对象和本体对象的接口应一致</strong>，让客户使用代理对象，这个方便本体和代理使用的替换</p><ul><li><p>保护代理：用于过滤一些请求的代理</p></li><li><p>虚拟代理：选择在合适的时机处理请求的代理</p></li><li><p>缓存代理：使用代理暂时缓存远算结果，下次运算先在缓存容器里读取，没有再计算</p></li><li><p>其他代理：防火墙代理，远程代理，保护代理，智能引用代理，写时复制代理</p></li></ul><h3 id="3-发布订阅模式-PubSub"><a href="#3-发布订阅模式-PubSub" class="headerlink" title="3.发布订阅模式(PubSub)"></a><strong>3.发布订阅模式(PubSub)</strong></h3><ol><li><p>定义：又叫观察者模式，定义对象间的一种一对多的依赖关系，当对象改变时，所有依赖它的对象都会得到通知</p></li><li><p>实现：</p><ul><li>首先指定好谁充当发布者</li><li>然后给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者</li><li>发布消息时，发布者遍历这个列表，依次触发存放的订阅者的回调函数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//订阅的通用实现</span><span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token punctuation">{</span>         clientList<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 缓存列表</span>        listen<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> fn <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//订阅函数， key用来判断发布者发布的事件是否是订阅者所希望收到订阅的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span> key <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span> key <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span> key <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> fn <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 订阅的消息添加进缓存列表</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            trigger<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 发布函数</span>                <span class="token keyword">var</span> key <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments <span class="token punctuation">)</span><span class="token punctuation">,</span>                 fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span> key <span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果没有绑定对应的消息</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span> i<span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// arguments 是trigger 时带上的参数</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> installEvent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token keyword">in</span> event <span class="token punctuation">)</span><span class="token punctuation">{</span>                obj<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> event<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//个人认为应还应判断是否有重名方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消订阅的通用实现</span>event<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果key 对应的消息没有被人订阅，则直接返回</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有传入具体的回调函数，表示需要取消key 对应消息的所有订阅</span>      fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> l <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 反向遍历订阅的回调函数列表, 需要取消订阅的一般靠后，从后面开始遍历性能更好</span>            <span class="token keyword">var</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除订阅者的回调函数</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><blockquote><p>缺点：</p><ul><li>创建订阅者本身要消耗一定的时间和内存，特别是订阅的消息一直未触发发布时，但这个订阅者会始终存在于内存中</li><li>发布—订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解</li></ul></blockquote><blockquote><p>GitHub库：<a href="https://github.com/mroderick/PubSubJS">https://github.com/mroderick/PubSubJS</a></p></blockquote><h3 id="4-策略模式strategy"><a href="#4-策略模式strategy" class="headerlink" title="4. 策略模式strategy"></a>4. 策略模式strategy</h3><blockquote><p>个人理解： 将一个对象(事物, 情景)的不同情况都封装为方法，再在不同情况下去调用对应的方法</p></blockquote><ol><li>定义：将不同情况的解决办法定义为函数，并用对象封装起来，不同情况调用不同函数</li><li>目的：使算法的<strong>使用</strong>和<strong>实现</strong>分离，内部实现其功能，用户只用关心使用</li><li>组成：<ul><li>策略类strategy： 封装了解决不同情况的对个算法(函数), 负责计算具体过程</li><li>环境类context：接收用户的请求，并将请求委托(分发)给对应的策略，因此需要维持对策略类的引用</li></ul></li><li>典例：表单验证</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http:// xxx.com/register<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registerForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            请输入用户名:&lt;input type="text" name="userName"/ > 请输入密码:&lt;input            type="text" name="password"/ > 请输入手机号码:&lt;input type="text"            name="phoneNumber"/ >            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">/***********************策略对象**************************/</span>            <span class="token keyword">var</span> strategies <span class="token operator">=</span> <span class="token punctuation">{</span>                isNonEmpty<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 传入表单值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                minLength<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> length<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                isMobile<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/(^1[3|5|8][0-9]{9}$)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/***********************Validator 类**************************/</span>            <span class="token keyword">var</span> Validator <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将需检查的规则全部缓存，不用考虑顺序</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加需检查的规则列表</span>            Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dom<span class="token punctuation">,</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rule<span class="token punctuation">;</span> <span class="token punctuation">(</span>rule <span class="token operator">=</span> rules<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 为什么需要闭包？</span>                        <span class="token keyword">var</span> strategyAry <span class="token operator">=</span> rule<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> rule<span class="token punctuation">.</span>errorMsg<span class="token punctuation">;</span>                        self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//缓存规则检查前的信息加工函数</span>                            <span class="token keyword">var</span> strategy <span class="token operator">=</span> strategyAry<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            strategyAry<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                            strategyAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> strategyAry<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 依次调用cache的函数进行检查</span>            Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> validatorFunc<span class="token punctuation">;</span><span class="token punctuation">(</span>validatorFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token function">validatorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/***********************客户调用代码**************************/</span>            <span class="token keyword">var</span> registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"registerForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> validataFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 添加检查需检查的表单项</span>                validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> strategy<span class="token punctuation">:</span> <span class="token string">"isNonEmpty"</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">:</span> <span class="token string">"用户名不能为空"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        strategy<span class="token punctuation">:</span> <span class="token string">"minLength:6"</span><span class="token punctuation">,</span>                        errorMsg<span class="token punctuation">:</span> <span class="token string">"用户名长度不能小于 10 位"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        strategy<span class="token punctuation">:</span> <span class="token string">"minLength:6"</span><span class="token punctuation">,</span>                        errorMsg<span class="token punctuation">:</span> <span class="token string">"密码长度不能小于 6 位"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>phoneNumber<span class="token punctuation">,</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> strategy<span class="token punctuation">:</span> <span class="token string">"isMobile"</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">:</span> <span class="token string">"手机号码格式不正确"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定表单验证的事件</span>            registerForm<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token function">validataFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="5-迭代器模式"><a href="#5-迭代器模式" class="headerlink" title="5.迭代器模式"></a>5.迭代器模式</h3><blockquote><p>与策略模式的对比：策略模式的各种策略是自己已知的，而迭代器模式所需要元素是未知的，通过迭代后才能确定</p></blockquote><p>定义：提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露对象的内部表示</p><p>分类：</p><ul><li>内部迭代器：规则隐藏在内部，外部不可见，缺点就是迭代规则不可控，交互只在第一次初始调用，</li><li>外部迭代器：迭代规则可手工控制，使迭代器更灵活，但调用也跟复杂了</li><li>倒序迭代器：从后面往前遍历的迭代器</li></ul><h3 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6.命令模式"></a>6.命令模式</h3><blockquote><p>个人理解： 将执行的方法与执行的本体对象分离</p></blockquote><p>没有接收者的智能命令，和策略模式非常相近，从代码结构上已经无法分辨它们，能分辨的只有它们意图的不同。</p><p>策略模式指向的问题域更小，所有策略对象的目标总是一致的，它们只是达到这个目标 的不同手段，它们的内部实现是针对“算法”而言的。</p><p>而智能命令模式指向的问题域更广，command 对象解决的目标更具发散性</p><h3 id="7-组合模式"><a href="#7-组合模式" class="headerlink" title="7.组合模式"></a>7.组合模式</h3><p>定义：用小的子对象来构建更大的对象，而这些子对象本身也有更小的孙对象构成</p><p>优点：</p><ul><li>用树形结构表示“部分-整体”的层次结构</li><li>通过对象的多态性，使用户对单个对象和组合对象的使用具有一致性(既方法名一样)</li></ul><p>注意：</p><ul><li>组合模式不是父子关系，只是组合对象把请求委托给叶子对象(类似职责链模式)</li><li>组合对象和叶子对象，叶子对象之间都必须是相同的接口，</li><li>组合对象和子对象为双向映射，一对一的关系，不能给同一个叶子对象两次请求委托</li></ul><p>缺点：</p><ul><li>系统中的每个对象看起来都与其他对象差不多。它们的区别只有在运行的时候会才会显现出来，这会使代码难以理解</li><li>如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起</li></ul><h3 id="8-模板方法模式"><a href="#8-模板方法模式" class="headerlink" title="8.模板方法模式"></a>8.模板方法模式</h3><blockquote><p>个人理解：不变的封装到父类，可变的封装到子类</p></blockquote><p>在 JavaScript 中, 我们很多时候都不需要依样画瓢地去实现一个模版方法模式，<strong>高阶函数是更好的选择</strong></p><h3 id="9-享元模式"><a href="#9-享元模式" class="headerlink" title="9.享元模式"></a>9.享元模式</h3><blockquote><p>个人理解：一段逻辑本来需要许多重复或相似的对象，但只使用一个对象(带有内部状态)当做模板，每次使用时再包装(传入外部状态)成所需要的对象来达到效果</p></blockquote><p>关键是<strong>如何划分内部状态和外部状态</strong>：</p><ul><li>内部状态存储于对象内部</li><li>内部状态可以被一些对象共享</li><li>内部状态独立于具体的场景，通常不会改变</li><li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</li></ul><p>例子：文件上传</p><pre class=" language-JavaScript"><code class="language-JavaScript">    Upload.prototype.delFile = function( id ){ // 文件删除函数        uploadManager.setExternalState( id, this );         if ( this.fileSize < 3000 ){            return this.dom.parentNode.removeChild( this.dom );        }        if ( window.confirm( '确定要删除该文件吗? ' + this.fileName ) ){            return this.dom.parentNode.removeChild( this.dom );        }    }    //实例化上传对象    var UploadFactory = (function(){        var createdFlyWeightObjs = {};        return {            create: function( uploadType){                 if ( createdFlyWeightObjs [ uploadType] ){  // 单例模式                    return createdFlyWeightObjs [ uploadType];                }                return createdFlyWeightObjs [ uploadType] = new Upload( uploadType);            }        }    })();    // 用统一的管理器封装外部状态    var uploadManager = (function(){        var uploadDatabase = {};        return {            add: function( id, uploadType, fileName, fileSize ){                var flyWeightObj = UploadFactory.create( uploadType );                var dom = document.createElement( 'div' );                dom.innerHTML =                '<span>文件名称:'+ fileName +', 文件大小: '+ fileSize +'</span>' +                '<button class="delFile">删除</button>';                dom.querySelector( '.delFile' ).onclick = function(){                    flyWeightObj.delFile( id );                }                document.body.appendChild( dom );                uploadDatabase[ id ] = {                    fileName: fileName,                    fileSize: fileSize,                    dom: dom                };                return flyWeightObj ;            },            setExternalState: function( id, flyWeightObj ){                var uploadData = uploadDatabase[ id ];                  for ( var i in uploadData ){        // 包装(传入外部状态)成所需要的对象                    flyWeightObj[ i ] = uploadData[ i ];                }            }        }    })();    // 触发开始上传的函数    var id = 0;    window.startUpload = function( uploadType, files ){        for ( var i = 0, file; file = files[ i++ ]; ){            var uploadObj = uploadManager.add( ++id, uploadType, file.fileName, file.fileSize );        }    };</code></pre><p>使用场景：</p><ul><li><p>一个程序中使用了大量的相似对象</p></li><li><p>由于使用了大量对象，造成很大的内存开销</p></li><li><p>对象的大多数状态都可以变为外部状态</p></li><li><p>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象</p></li></ul><h3 id="10-职责链模式"><a href="#10-职责链模式" class="headerlink" title="10.职责链模式"></a>10.职责链模式</h3><p>定义：将多个对象连成一条链，若处理不了就将请求向下传递，直到有一个对象能处理，它避免请求对象与多个处理对象之间耦合的局面</p><p>优点：</p><ul><li>解耦了请求发送者和 N 个接收者之间的复杂关系，由于不知道链中的哪个节点可以处理你发出的请求，所以你只需把请求传递给第一个节点即可</li><li>链中的节点对象可以灵活地拆分重组</li><li>可以手动指定起始节点</li></ul><p>缺点</p><ul><li>需要在最后添加错误处理节点，以防没有成功处理请求的节点</li><li>可能存在多余的节点并未使用</li></ul><h3 id="11-中介者模式"><a href="#11-中介者模式" class="headerlink" title="11.中介者模式"></a>11.中介者模式</h3><blockquote><p>个人理解：让多个对象之间的相互联系变成多个对象只与中介者联系，由中介者统一进行管理，如vuex</p></blockquote><img src="/archives/5-js-she-ji-mo-shi.htm/hengBlog\source\images\5.中介者模式.png" style="zoom: 33%;"><p>优点：</p><ul><li>解耦对象之间的紧密关系</li><li>使对象间多对多的关系变成一对多关系</li></ul><h3 id="12-装饰者模式"><a href="#12-装饰者模式" class="headerlink" title="12.装饰者模式"></a>12.装饰者模式</h3><blockquote><p>可以配合AOP实现多个函数方法的整体化，又类似适配器模式，可以在外层包装一层函数进行装饰。值得注意的是，它并不会更改原对象</p></blockquote><p>定义： 给对象动态的增加职责(方法)</p><p>例子：AOP装饰函数</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>before <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> beforefn <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> __self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存原函数的引用</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 返回包含了原函数和新函数的"代理"函数</span>        beforefn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 执行新函数，可在此处修改参数arguments</span>        <span class="token keyword">return</span> __self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行原函数并返回原函数的执行结果，并且保证this 不被劫持</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>after <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> afterfn <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> __self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> ret <span class="token operator">=</span> __self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span>        afterfn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>值得注意的是：</p><ul><li>因为函数通过 <code>Function.prototype.before</code> 或者 <code>Function.prototype.after</code> 被装 饰之后，返回的实际上是一个新的函数，如果在原函数上保存了一些属性，那么这些属性会丢失</li><li>装饰方式也叠加了函数的作用域，如果装饰的链条过长，性能上也会受到一些 影响</li></ul><p>代理模式和装饰者模式的区别：<strong>在于它们的意图和设计目的</strong>。</p><ul><li><p>代理模式的目的是，当直接访问本体不方便或者不符合需要时，为这个本体提供一个替代者。本体定义了关键功能，而代理提供或拒绝对它的访问，或者在访问本体之前做一些额外的事情。代理模式强调一种关系(Proxy 与它的实体之间的关系)，这种关系可以静态的表达，也就是说，这种关系在一开始就可以被确定。而且代理模式通常只有一层代理本体的引用</p></li><li><p>装饰者模式的作用就是为对象动态加入行为，用于一开始不能确定对象的全部功能时。而且装饰者模式经常会形成一条长长的装饰链</p></li></ul><h3 id="13-状态模式"><a href="#13-状态模式" class="headerlink" title="13.状态模式"></a>13.状态模式</h3><p>定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p><p>应用关键：区别事物上下文(context)内部的状态，事物<strong>内部状态的改变</strong>往往会带来事物的<strong>行为改变</strong>，把事物的每种状态都封装成单独的类，跟此种状态有关的行为都被封装在这个类的内部</p><p>优点：</p><ul><li>状态模式定义了状态与行为之间的关系，并将它们封装在一个类里。通过增加新的状态类，很容易增加新的状态和转换方法</li><li>避免 Context 无限膨胀，状态切换的逻辑被分布在状态类中，也去掉了 Context 中原本过多的条件分支</li><li>用对象代替字符串来记录当前状态，使得状态的切换更加一目了然</li><li>Context 中的请求动作和状态类中封装的行为可以非常容易地独立变化而互不影响</li></ul><p>缺点：</p><ul><li>会在系统中定义许多状态类，枯燥乏味，而且系统中会因此而增加不少对象</li><li>由于逻辑分散在状态类中，虽然避开了不受欢迎的条件分支语句，但也造成了逻辑分散的问题，我们无法在一个地方就看出整个状态机的逻辑</li></ul><p><strong>状态模式和策略模式的关系</strong>：</p><p>相同点：它们都有一个上下文、一些策略或者状态类，上下文把请求委托给这些类来执行</p><p>区别：策略模式中的各个策略类之间是平等又平行的，它们之间没有任何联系， 所以客户必须熟知这些策略类的作用，以便客户可以随时主动切换算法;    而在状态模式中，状态和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为”这件事情发生在状态模式内部。对客户来说，并不需要了解这些细节。这正是状态模式的作用所在。</p><h3 id="14-适配器模式"><a href="#14-适配器模式" class="headerlink" title="14.适配器模式"></a>14.适配器模式</h3><p>应用：解决两个软件实体的接口不兼容的问题</p><p>装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。</p><h2 id="二、设计原则"><a href="#二、设计原则" class="headerlink" title="二、设计原则"></a>二、设计原则</h2><h3 id="1-单一职责原则-SRP"><a href="#1-单一职责原则-SRP" class="headerlink" title="1.单一职责原则(SRP)"></a>1.单一职责原则(SRP)</h3><p>定义：一个类应该仅有一个引起它变化的原因, 既一个对象或方法只做一件事情</p><p>分离原则：</p><ul><li>如果随着需求的变化，有两个职责总是同时变化，那就不必分离他们(比如在 ajax 请求的时候，创建 xhr 对象和发送 xhr 请求几乎总是在一起的，那么创建 xhr 对象的职责和发送 xhr 请求的职责就没有必要分开。)</li><li>另一方面，职责的变化轴线仅当它们确定会发生变化时才具有意义，即使两个职责已经被耦合在一起，但它们还没有发生改变的征兆，那么也许没有必要主动分离它们，在代码需要重构的时候再进行分离也不迟。</li></ul><h3 id="2-最少知识原则-LKP"><a href="#2-最少知识原则-LKP" class="headerlink" title="2.最少知识原则(LKP)"></a>2.最少知识原则(LKP)</h3><p>定义：一个软件实体应当尽量少的与其他实体发生作用，既减少交互，减少耦合</p><h3 id="3-开放-封闭原则-OCP"><a href="#3-开放-封闭原则-OCP" class="headerlink" title="3.开放-封闭原则(OCP)"></a>3.开放-封闭原则(OCP)</h3><p>定义：软件实体(类，模块，函数等)应该是能扩展，但是不可修改的</p><h2 id="三、代码重构建议"><a href="#三、代码重构建议" class="headerlink" title="三、代码重构建议"></a>三、代码重构建议</h2><ol><li>提炼函数，及时添加注释，不要让函数过长</li><li>合并重复的条件片段</li><li>将条件分支语句提炼成函数</li><li>合理的使用循环，递归</li><li>使用return提前让条件退出以代替嵌套的条件分支(小技巧：即在面对一个嵌套的 if 分支时，我们可以把外层 if 表达式进行反转，就能转化为多个并级的条件判断语句)</li><li>传递对象参数以代替过长的参数列表</li><li>尽量减少参数数量</li><li>尽量不要用嵌套的三目运算符，该为if</li><li>合理使用链式调用(原理：方法结束后对象返回自身)</li><li>分解大型类为多个小类</li><li>使用return退出多重循环</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid（网格）布局</title>
      <link href="/4-grid-wang-ge-bu-ju.html"/>
      <url>/4-grid-wang-ge-bu-ju.html</url>
      
        <content type="html"><![CDATA[<h1 id="grid（网格）布局"><a href="#grid（网格）布局" class="headerlink" title="grid（网格）布局"></a>grid（网格）布局</h1><h6 id="参考链接-http-www-ruanyifeng-com-blog-2019-03-grid-layout-tutorial-html"><a href="#参考链接-http-www-ruanyifeng-com-blog-2019-03-grid-layout-tutorial-html" class="headerlink" title="参考链接 http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html"></a>参考链接 <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></h6><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a><code>display</code></h3><p>采用网格(grid)布局<br>==注意==: 设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</p><ul><li><code>grid</code>：块级容器</li><li><code>inline-grid</code>：行内容器</li></ul><h3 id="grid-auto-columns-rows"><a href="#grid-auto-columns-rows" class="headerlink" title="grid-auto-columns / rows"></a><code>grid-auto-columns / rows</code></h3><ul><li>设置自动创建的多余网格的列宽和行高</li></ul><h3 id="grid-template-rows-columns"><a href="#grid-template-rows-columns" class="headerlink" title="grid-template-rows / columns"></a><code>grid-template-rows / columns</code></h3><ul><li><p>指定行列宽度</p><ul><li><p>用像素或百分比</p><pre><code>grid-template-rows: 100px 100px 100px;grid-template-columns: 33.3% 33.3% 33.3%;</code></pre></li><li><p>repeat()</p><pre><code>  grid-template-rows: repeat（3,100px）</code></pre></li><li><p>auto-fill</p><pre><code>grid-template-columns: repeat(auto-fill, 100px);</code></pre></li><li><p>fr单位(既fraction)</p><pre><code>grid-template-columns: 1fr 1fr;</code></pre></li><li><p>minmax(min, max)</p></li></ul></li><li><p>网格线名称</p><p>注意三行应制定四行网格线</p><ul><li>[name]</li></ul></li></ul><h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a><code>grid-template-areas</code></h3><ul><li>定义区域，名字即为网格网格名</li></ul><pre><code>    grid-template-areas: 'a b c'                               'd e f'                               'g h i';</code></pre><p>  不要利用的区域用”点”(.)表示<br>  注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<code>区域名-start</code>，终止网格线自动命名为<code>区域名-end</code>。</p><h3 id="grid-row-column-gap"><a href="#grid-row-column-gap" class="headerlink" title="grid-row / column-gap"></a><code>grid-row / column-gap</code></h3><p>根据最新标准，上面三个属性名的grid-前缀已经删除，grid-column-gap和grid-row-gap写成column-gap和row-gap，grid-gap写成gap。</p><ul><li><p>指定行列的间距</p></li><li><p>合并写法</p><ul><li><code>grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code></li><li><code>gap: &lt;row-gap&gt; &lt;column-gap&gt;;</code></li></ul></li></ul><h3 id="grid-auto-flow-先行后列"><a href="#grid-auto-flow-先行后列" class="headerlink" title="grid-auto-flow  先行后列"></a><code>grid-auto-flow</code>  先行后列</h3><ul><li><p>row / column</p><ul><li><p>不考虑空位，保证先后顺序</p><ul><li>链接：<a href="https://jsbin.com/wapejok/edit?css,output">https://jsbin.com/wapejok/edit?css,output</a></li></ul></li></ul></li><li><p>row dense / column dense</p><ul><li><p>尽量紧密排列</p><ul><li>链接：<a href="https://jsbin.com/xutokec/edit?css,output">https://jsbin.com/xutokec/edit?css,output</a></li></ul></li></ul></li></ul><h3 id="单元格内容的位置"><a href="#单元格内容的位置" class="headerlink" title="单元格内容的位置"></a>单元格内容的位置</h3><ul><li><code>align-items</code> 垂直方向</li><li><code>justify-items</code> 水平方向</li><li>合并写法: <code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></li></ul><h3 id="项目整体在容器内的位置"><a href="#项目整体在容器内的位置" class="headerlink" title="项目整体在容器内的位置"></a>项目整体在容器内的位置</h3><ul><li><p><code>justify-content</code> 水平方向</p></li><li><p><code>align-content</code> 垂直方向</p></li><li><p><code>place-content</code>  前两个的合并写法</p><ul><li><code>place-content: &lt;align-items&gt; &lt;justify-items&gt;;</code></li></ul></li></ul><hr><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="指定项目位置"><a href="#指定项目位置" class="headerlink" title="指定项目位置"></a>指定项目位置</h3><ul><li><p><code>grid-row / column-start / end</code></p><ul><li><p>写法</p><ul><li>网格线数字</li><li>网格线名字</li><li>span：num</li><li>重叠了用<code>z-index</code></li></ul></li><li><p>简写</p><ul><li><code>grid-row / column: &lt;start-line&gt; / &lt;end-line&gt;</code></li></ul></li></ul></li></ul><h3 id="指定项目区域名"><a href="#指定项目区域名" class="headerlink" title="指定项目区域名"></a>指定项目区域名</h3><ul><li><code>grid-area: 区域名</code></li></ul><h3 id="单元格内容的位置-优先"><a href="#单元格内容的位置-优先" class="headerlink" title="单元格内容的位置(优先)"></a>单元格内容的位置(优先)</h3><ul><li><code>align-self</code> 垂直方向</li><li><code>justify-self</code> 水平方向</li><li>合并写法: <code>place-self: &lt;align-items&gt; &lt;justify-items&gt;;</code></li></ul><p><img src="/../images/4.%20%20grid%EF%BC%88%E7%BD%91%E6%A0%BC%EF%BC%89%E5%B8%83%E5%B1%80.png" alt="思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> grid </tag>
            
            <tag> 布局 </tag>
            
            <tag> 网格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/3-git-chang-yong-ming-ling.html"/>
      <url>/3-git-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h5 id="集中式和分布式版本控制系统的区别"><a href="#集中式和分布式版本控制系统的区别" class="headerlink" title="集中式和分布式版本控制系统的区别"></a>集中式和分布式版本控制系统的区别</h5><blockquote><p>分布式版本控制系统：每个开发者都有整个代码库的所有版本，在离线状态下开发者可以进行版本管理开发, 等网络恢复再push到仓库中。</p></blockquote><blockquote><p>集中式版本控制系统：每个开发者只有应用代码库的一个版本，在离线状态下开发者无法进行版本管理开发。</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg" alt="Git 工作区、暂存区和版本库"></p><ol><li><h6 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h6></li></ol><p><code>git init</code>:初始化仓库<br><code>git status</code> : 查看状态：红色表示在工作区，绿色表示在暂存区，其他在版本区<br><code>git add 文件名</code>  :工作区添加到暂存区，”.”号表所有<br><code>git commit -m '注释'</code> : 暂存区到版本区<br><code>git clone URL</code> : 克隆仓库<br><code>git remote add 别名 URL</code>: 本地仓库关联远程仓库,别名一般用origin<br><code>git remote remove 别名</code>: 本地仓库移除关联</p><ol start="2"><li><h6 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h6></li></ol><p><code>git checkout 分支</code> : 切换分支<br><code>git checkout -b 分支</code> : 创建并切换<br><code>git branch 分支</code> : 创建分支但不切换<br><code>git branch</code>: 查看分支列表<br><code>git checkout -d 分支</code> : 删除分支<br><code>git push origin 分支</code> : 分支推送远程<br><code>git pull origin 分支</code> : 远程拉取到本地<br><code>git fetch origin master:tmp</code>: 新建一个tmp分支，将远程仓库的master分支上代码版本复制到tmp分支上，不会自动合并<br><code>git merge 分支</code> : 指定分支合并到当前分支</p><ol start="3"><li><h6 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h6><p><code>git log</code>: 提交日志<br><code>git reflog</code>: 每次提交的ID<br><code>git reset --hard HEAD^</code>: 版本回退到一个版本，”^“回退一个版本，”^^”回退两个版本<br><code>git reset --hard ID号</code>:回退到指定版本</p></li><li><h6 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h6><p><code>git rm 文件名</code>: 删除指定文件<br><code>git rm -r 文件名</code>: 删除指定文件夹<br><code>git rm --cached 文件</code>: 从暂存区删除 </p></li><li><h6 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h6></li></ol><p><code>git diff</code> : 比较暂存区与工作区<br><code>git diff --cached</code> : 比较版本区与暂存区<br><code>git diff master</code> : 比较版本区与工作区<br><code>git diff branch1 branch2</code>:显示出两个分支之间所有有差异的文件的详细差异<br><code>git diff branch1 branch2 --stat</code>:显示出两个分支之间所有有差异的文件列表<br><code>git diff branch1 branch2 xxx</code>:显示指定文件的详细差异</p><hr><h6 id="补充基础Linux命令"><a href="#补充基础Linux命令" class="headerlink" title="补充基础Linux命令"></a>补充基础Linux命令</h6><p><code>mkdir</code> :创建文件夹<br><code>vi</code> : 创建文件并进入<br><code>i</code> :编辑模式<br><code>ESC+:+wq</code> : 保存并退出<br><code>ESC+:+q!</code> : 不保存并退出<br><code>cd</code> : 进入文件夹<br><code>ls</code> : 当前文件夹文件列表<br><code>pwd</code> : 当前目录<br><code>cat</code> 文件 : 显示文件内容<br><code>clear</code> : 清屏</p><h6 id="git-flow"><a href="#git-flow" class="headerlink" title="git flow"></a>git flow</h6><ol><li>日常开发：feature =&gt; dev =&gt; test =&gt; master</li><li>紧急修复bug：master =&gt; hotfix =&gt; test =&gt; master</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>betterScroll踩坑记录</title>
      <link href="/1-betterscroll-cai-keng-ji-lu.html"/>
      <url>/1-betterscroll-cai-keng-ji-lu.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>使用BetterScroll刚<code>npm run serve</code>时无法进行滑动，需要修改BetterScroll的源码，<br>   修改<code>BetterSC/shared-utils/src/dom.ts</code> 中的常量hasTouch为true,<br>   这样就可以在初始化时对参数进行设置,把一切掌握在自己手中</p><p>   使用方法如下:</p><pre><code> new BScroll时,在参数options中加入 mouseWheel: true,   //开启鼠标滚轮 disableMouse: false,   //启用鼠标拖动 disableTouch: false    //启用手指触摸</code></pre><p>   参考博客：<a href="https://www.cnblogs.com/mldonkey/p/11421577.html">https://www.cnblogs.com/mldonkey/p/11421577.html</a></p></li></ol><ol start="2"><li>使用BetterScroll后绑定scroll, click事件后无法触发，也无报错<br> BetterScroll默认拦截了click事件可在<code>new Bscroll()</code>的配置对象中传入<code> click: true</code></li><li>使用BetterScroll的<code>scroll</code>事件必须同时在<code>new Bscroll()</code>配置对象中指定<code>probeType</code> </li></ol><p><img src="/../images/1.1.jpg" alt="what"></p><p>(后面发现官网都有说明… 链接：<a href="https://better-scroll.github.io/docs/zh-CN/FAQ/#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84-betterscroll-%E7%9B%91%E5%90%AC-scroll-%E9%92%A9%E5%AD%90%EF%BC%8C%E7%9B%91%E5%90%AC%E5%99%A8%E4%B8%8D%E6%89%A7%E8%A1%8C%EF%BC%9F">https://better-scroll.github.io/docs/zh-CN/FAQ/#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84-betterscroll-%E7%9B%91%E5%90%AC-scroll-%E9%92%A9%E5%AD%90%EF%BC%8C%E7%9B%91%E5%90%AC%E5%99%A8%E4%B8%8D%E6%89%A7%E8%A1%8C%EF%BC%9F</a>)</p><p><img src="/../images/1.2.jpg" alt="what"></p><p>. 使用better-scroll时注意$nextTick的使用</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue动态路由引入和异步组件记录</title>
      <link href="/2-vue-router-dong-tai-lu-you.html"/>
      <url>/2-vue-router-dong-tai-lu-you.html</url>
      
        <content type="html"><![CDATA[<p>动态引入的路由组件在打包时路由组件会被单独打包(代码分割 code split),<br>默认不请求加载路由组件打包文件, 当请求需要路由组件时才请求加载,当引入需要的的组件时在<code>Network</code>会增加一个打包文件(一般为<code>/^\d+.js$/</code>格式)。</p><h4 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h4><ul><li><p>component是一个执行就会<code>import()</code>的函数</p><pre><code>myComponent =  () =&gt; import(path)</code></pre></li><li><p>将组件定义对象(component definition)传递给 <code>resolve</code> 回调函数</p><pre><code>Vue.component(component, (resolve, reject) =&gt; {  setTimeout(() =&gt; {    resolve({      template: YourTemplate    })  }, 100)})</code></pre></li><li><p>使用<code>require</code>引入，这个特殊的 require 语法将指示 webpack 自动将构建后的代码，拆分到不同的 bundle 中，然后通过 Ajax 请求加载。</p><pre><code>Vue.component(component, (resolve) =&gt; {  setTimeOut(() =&gt; {    require(path, resolve);  }, 100)})</code></pre></li><li><p>使用返回的<code>promise</code>resolve前<code>import</code></p><pre><code>- Vue.component(component, (resolve) =&gt; {    setTimeOut(() =&gt; {      import(path).then(resolve);    }, 100)  })- Vue.component(component, Promise.resolve(template对象))- Vue.component(component, Promise.resolveDelay(template对象, time))</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
